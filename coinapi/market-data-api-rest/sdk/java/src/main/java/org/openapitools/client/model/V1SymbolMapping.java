/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * Represents symbol mapping information for exchange symbols.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-24T06:05:22.687583242Z[Etc/UTC]", comments = "Generator version: 7.16.0")
public class V1SymbolMapping {
  public static final String SERIALIZED_NAME_SYMBOL_ID = "symbol_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID)
  @javax.annotation.Nullable
  private String symbolId;

  public static final String SERIALIZED_NAME_SYMBOL_ID_EXCHANGE = "symbol_id_exchange";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID_EXCHANGE)
  @javax.annotation.Nullable
  private String symbolIdExchange;

  public static final String SERIALIZED_NAME_COINAPI_DATAINFO_ID = "coinapi_datainfo_id";
  @SerializedName(SERIALIZED_NAME_COINAPI_DATAINFO_ID)
  @javax.annotation.Nullable
  private Integer coinapiDatainfoId;

  public static final String SERIALIZED_NAME_ASSET_ID_BASE_EXCHANGE = "asset_id_base_exchange";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_BASE_EXCHANGE)
  @javax.annotation.Nullable
  private String assetIdBaseExchange;

  public static final String SERIALIZED_NAME_ASSET_ID_QUOTE_EXCHANGE = "asset_id_quote_exchange";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_QUOTE_EXCHANGE)
  @javax.annotation.Nullable
  private String assetIdQuoteExchange;

  public static final String SERIALIZED_NAME_ASSET_ID_BASE = "asset_id_base";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_BASE)
  @javax.annotation.Nullable
  private String assetIdBase;

  public static final String SERIALIZED_NAME_ASSET_ID_QUOTE = "asset_id_quote";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_QUOTE)
  @javax.annotation.Nullable
  private String assetIdQuote;

  public static final String SERIALIZED_NAME_PRICE_PRECISION = "price_precision";
  @SerializedName(SERIALIZED_NAME_PRICE_PRECISION)
  @javax.annotation.Nullable
  private Double pricePrecision;

  public static final String SERIALIZED_NAME_SIZE_PRECISION = "size_precision";
  @SerializedName(SERIALIZED_NAME_SIZE_PRECISION)
  @javax.annotation.Nullable
  private Double sizePrecision;

  public V1SymbolMapping() {
  }

  public V1SymbolMapping symbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * The symbol ID.
   * @return symbolId
   */
  @javax.annotation.Nullable
  public String getSymbolId() {
    return symbolId;
  }

  public void setSymbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
  }


  public V1SymbolMapping symbolIdExchange(@javax.annotation.Nullable String symbolIdExchange) {
    this.symbolIdExchange = symbolIdExchange;
    return this;
  }

  /**
   * The exchange-specific symbol ID.
   * @return symbolIdExchange
   */
  @javax.annotation.Nullable
  public String getSymbolIdExchange() {
    return symbolIdExchange;
  }

  public void setSymbolIdExchange(@javax.annotation.Nullable String symbolIdExchange) {
    this.symbolIdExchange = symbolIdExchange;
  }


  public V1SymbolMapping coinapiDatainfoId(@javax.annotation.Nullable Integer coinapiDatainfoId) {
    this.coinapiDatainfoId = coinapiDatainfoId;
    return this;
  }

  /**
   * The CoinAPI DataInfo ID.
   * @return coinapiDatainfoId
   */
  @javax.annotation.Nullable
  public Integer getCoinapiDatainfoId() {
    return coinapiDatainfoId;
  }

  public void setCoinapiDatainfoId(@javax.annotation.Nullable Integer coinapiDatainfoId) {
    this.coinapiDatainfoId = coinapiDatainfoId;
  }


  public V1SymbolMapping assetIdBaseExchange(@javax.annotation.Nullable String assetIdBaseExchange) {
    this.assetIdBaseExchange = assetIdBaseExchange;
    return this;
  }

  /**
   * The exchange-specific base asset ID.
   * @return assetIdBaseExchange
   */
  @javax.annotation.Nullable
  public String getAssetIdBaseExchange() {
    return assetIdBaseExchange;
  }

  public void setAssetIdBaseExchange(@javax.annotation.Nullable String assetIdBaseExchange) {
    this.assetIdBaseExchange = assetIdBaseExchange;
  }


  public V1SymbolMapping assetIdQuoteExchange(@javax.annotation.Nullable String assetIdQuoteExchange) {
    this.assetIdQuoteExchange = assetIdQuoteExchange;
    return this;
  }

  /**
   * The exchange-specific quote asset ID.
   * @return assetIdQuoteExchange
   */
  @javax.annotation.Nullable
  public String getAssetIdQuoteExchange() {
    return assetIdQuoteExchange;
  }

  public void setAssetIdQuoteExchange(@javax.annotation.Nullable String assetIdQuoteExchange) {
    this.assetIdQuoteExchange = assetIdQuoteExchange;
  }


  public V1SymbolMapping assetIdBase(@javax.annotation.Nullable String assetIdBase) {
    this.assetIdBase = assetIdBase;
    return this;
  }

  /**
   * The base asset ID.
   * @return assetIdBase
   */
  @javax.annotation.Nullable
  public String getAssetIdBase() {
    return assetIdBase;
  }

  public void setAssetIdBase(@javax.annotation.Nullable String assetIdBase) {
    this.assetIdBase = assetIdBase;
  }


  public V1SymbolMapping assetIdQuote(@javax.annotation.Nullable String assetIdQuote) {
    this.assetIdQuote = assetIdQuote;
    return this;
  }

  /**
   * The quote asset ID.
   * @return assetIdQuote
   */
  @javax.annotation.Nullable
  public String getAssetIdQuote() {
    return assetIdQuote;
  }

  public void setAssetIdQuote(@javax.annotation.Nullable String assetIdQuote) {
    this.assetIdQuote = assetIdQuote;
  }


  public V1SymbolMapping pricePrecision(@javax.annotation.Nullable Double pricePrecision) {
    this.pricePrecision = pricePrecision;
    return this;
  }

  /**
   * The price precision.
   * @return pricePrecision
   */
  @javax.annotation.Nullable
  public Double getPricePrecision() {
    return pricePrecision;
  }

  public void setPricePrecision(@javax.annotation.Nullable Double pricePrecision) {
    this.pricePrecision = pricePrecision;
  }


  public V1SymbolMapping sizePrecision(@javax.annotation.Nullable Double sizePrecision) {
    this.sizePrecision = sizePrecision;
    return this;
  }

  /**
   * The size precision.
   * @return sizePrecision
   */
  @javax.annotation.Nullable
  public Double getSizePrecision() {
    return sizePrecision;
  }

  public void setSizePrecision(@javax.annotation.Nullable Double sizePrecision) {
    this.sizePrecision = sizePrecision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1SymbolMapping v1SymbolMapping = (V1SymbolMapping) o;
    return Objects.equals(this.symbolId, v1SymbolMapping.symbolId) &&
        Objects.equals(this.symbolIdExchange, v1SymbolMapping.symbolIdExchange) &&
        Objects.equals(this.coinapiDatainfoId, v1SymbolMapping.coinapiDatainfoId) &&
        Objects.equals(this.assetIdBaseExchange, v1SymbolMapping.assetIdBaseExchange) &&
        Objects.equals(this.assetIdQuoteExchange, v1SymbolMapping.assetIdQuoteExchange) &&
        Objects.equals(this.assetIdBase, v1SymbolMapping.assetIdBase) &&
        Objects.equals(this.assetIdQuote, v1SymbolMapping.assetIdQuote) &&
        Objects.equals(this.pricePrecision, v1SymbolMapping.pricePrecision) &&
        Objects.equals(this.sizePrecision, v1SymbolMapping.sizePrecision);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolId, symbolIdExchange, coinapiDatainfoId, assetIdBaseExchange, assetIdQuoteExchange, assetIdBase, assetIdQuote, pricePrecision, sizePrecision);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1SymbolMapping {\n");
    sb.append("    symbolId: ").append(toIndentedString(symbolId)).append("\n");
    sb.append("    symbolIdExchange: ").append(toIndentedString(symbolIdExchange)).append("\n");
    sb.append("    coinapiDatainfoId: ").append(toIndentedString(coinapiDatainfoId)).append("\n");
    sb.append("    assetIdBaseExchange: ").append(toIndentedString(assetIdBaseExchange)).append("\n");
    sb.append("    assetIdQuoteExchange: ").append(toIndentedString(assetIdQuoteExchange)).append("\n");
    sb.append("    assetIdBase: ").append(toIndentedString(assetIdBase)).append("\n");
    sb.append("    assetIdQuote: ").append(toIndentedString(assetIdQuote)).append("\n");
    sb.append("    pricePrecision: ").append(toIndentedString(pricePrecision)).append("\n");
    sb.append("    sizePrecision: ").append(toIndentedString(sizePrecision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol_id", "symbol_id_exchange", "coinapi_datainfo_id", "asset_id_base_exchange", "asset_id_quote_exchange", "asset_id_base", "asset_id_quote", "price_precision", "size_precision"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1SymbolMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1SymbolMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in V1SymbolMapping is not found in the empty JSON string", V1SymbolMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1SymbolMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `V1SymbolMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol_id") != null && !jsonObj.get("symbol_id").isJsonNull()) && !jsonObj.get("symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id").toString()));
      }
      if ((jsonObj.get("symbol_id_exchange") != null && !jsonObj.get("symbol_id_exchange").isJsonNull()) && !jsonObj.get("symbol_id_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `symbol_id_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id_exchange").toString()));
      }
      if ((jsonObj.get("asset_id_base_exchange") != null && !jsonObj.get("asset_id_base_exchange").isJsonNull()) && !jsonObj.get("asset_id_base_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_base_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_base_exchange").toString()));
      }
      if ((jsonObj.get("asset_id_quote_exchange") != null && !jsonObj.get("asset_id_quote_exchange").isJsonNull()) && !jsonObj.get("asset_id_quote_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_quote_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_quote_exchange").toString()));
      }
      if ((jsonObj.get("asset_id_base") != null && !jsonObj.get("asset_id_base").isJsonNull()) && !jsonObj.get("asset_id_base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_base").toString()));
      }
      if ((jsonObj.get("asset_id_quote") != null && !jsonObj.get("asset_id_quote").isJsonNull()) && !jsonObj.get("asset_id_quote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_quote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_quote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1SymbolMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1SymbolMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1SymbolMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1SymbolMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<V1SymbolMapping>() {
           @Override
           public void write(JsonWriter out, V1SymbolMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1SymbolMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1SymbolMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1SymbolMapping
   * @throws IOException if the JSON string is invalid with respect to V1SymbolMapping
   */
  public static V1SymbolMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1SymbolMapping.class);
  }

  /**
   * Convert an instance of V1SymbolMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

