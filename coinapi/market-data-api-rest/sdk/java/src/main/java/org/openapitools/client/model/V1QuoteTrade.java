/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.V1LastTrade;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * Represents a quote trade data model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-24T06:05:22.687583242Z[Etc/UTC]", comments = "Generator version: 7.16.0")
public class V1QuoteTrade {
  public static final String SERIALIZED_NAME_SYMBOL_ID = "symbol_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID)
  @javax.annotation.Nullable
  private String symbolId;

  public static final String SERIALIZED_NAME_TIME_EXCHANGE = "time_exchange";
  @SerializedName(SERIALIZED_NAME_TIME_EXCHANGE)
  @javax.annotation.Nullable
  private OffsetDateTime timeExchange;

  public static final String SERIALIZED_NAME_TIME_COINAPI = "time_coinapi";
  @SerializedName(SERIALIZED_NAME_TIME_COINAPI)
  @javax.annotation.Nullable
  private OffsetDateTime timeCoinapi;

  public static final String SERIALIZED_NAME_ASK_PRICE = "ask_price";
  @SerializedName(SERIALIZED_NAME_ASK_PRICE)
  @javax.annotation.Nullable
  private Double askPrice;

  public static final String SERIALIZED_NAME_ASK_SIZE = "ask_size";
  @SerializedName(SERIALIZED_NAME_ASK_SIZE)
  @javax.annotation.Nullable
  private Double askSize;

  public static final String SERIALIZED_NAME_BID_PRICE = "bid_price";
  @SerializedName(SERIALIZED_NAME_BID_PRICE)
  @javax.annotation.Nullable
  private Double bidPrice;

  public static final String SERIALIZED_NAME_BID_SIZE = "bid_size";
  @SerializedName(SERIALIZED_NAME_BID_SIZE)
  @javax.annotation.Nullable
  private Double bidSize;

  public static final String SERIALIZED_NAME_LAST_TRADE = "last_trade";
  @SerializedName(SERIALIZED_NAME_LAST_TRADE)
  @javax.annotation.Nullable
  private V1LastTrade lastTrade;

  public V1QuoteTrade() {
  }

  public V1QuoteTrade symbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * The symbol identifier.
   * @return symbolId
   */
  @javax.annotation.Nullable
  public String getSymbolId() {
    return symbolId;
  }

  public void setSymbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
  }


  public V1QuoteTrade timeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
    return this;
  }

  /**
   * The exchange time of the quote trade.
   * @return timeExchange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeExchange() {
    return timeExchange;
  }

  public void setTimeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
  }


  public V1QuoteTrade timeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
    return this;
  }

  /**
   * The CoinAPI time when the quote trade was received.
   * @return timeCoinapi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCoinapi() {
    return timeCoinapi;
  }

  public void setTimeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
  }


  public V1QuoteTrade askPrice(@javax.annotation.Nullable Double askPrice) {
    this.askPrice = askPrice;
    return this;
  }

  /**
   * The best asking price.
   * @return askPrice
   */
  @javax.annotation.Nullable
  public Double getAskPrice() {
    return askPrice;
  }

  public void setAskPrice(@javax.annotation.Nullable Double askPrice) {
    this.askPrice = askPrice;
  }


  public V1QuoteTrade askSize(@javax.annotation.Nullable Double askSize) {
    this.askSize = askSize;
    return this;
  }

  /**
   * The volume resting on the best ask. If the value is equal to zero, then the size is unknown.
   * @return askSize
   */
  @javax.annotation.Nullable
  public Double getAskSize() {
    return askSize;
  }

  public void setAskSize(@javax.annotation.Nullable Double askSize) {
    this.askSize = askSize;
  }


  public V1QuoteTrade bidPrice(@javax.annotation.Nullable Double bidPrice) {
    this.bidPrice = bidPrice;
    return this;
  }

  /**
   * The best bidding price.
   * @return bidPrice
   */
  @javax.annotation.Nullable
  public Double getBidPrice() {
    return bidPrice;
  }

  public void setBidPrice(@javax.annotation.Nullable Double bidPrice) {
    this.bidPrice = bidPrice;
  }


  public V1QuoteTrade bidSize(@javax.annotation.Nullable Double bidSize) {
    this.bidSize = bidSize;
    return this;
  }

  /**
   * The volume resting on the best bid. If the value is equal to zero, then the size is unknown.
   * @return bidSize
   */
  @javax.annotation.Nullable
  public Double getBidSize() {
    return bidSize;
  }

  public void setBidSize(@javax.annotation.Nullable Double bidSize) {
    this.bidSize = bidSize;
  }


  public V1QuoteTrade lastTrade(@javax.annotation.Nullable V1LastTrade lastTrade) {
    this.lastTrade = lastTrade;
    return this;
  }

  /**
   * Get lastTrade
   * @return lastTrade
   */
  @javax.annotation.Nullable
  public V1LastTrade getLastTrade() {
    return lastTrade;
  }

  public void setLastTrade(@javax.annotation.Nullable V1LastTrade lastTrade) {
    this.lastTrade = lastTrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1QuoteTrade v1QuoteTrade = (V1QuoteTrade) o;
    return Objects.equals(this.symbolId, v1QuoteTrade.symbolId) &&
        Objects.equals(this.timeExchange, v1QuoteTrade.timeExchange) &&
        Objects.equals(this.timeCoinapi, v1QuoteTrade.timeCoinapi) &&
        Objects.equals(this.askPrice, v1QuoteTrade.askPrice) &&
        Objects.equals(this.askSize, v1QuoteTrade.askSize) &&
        Objects.equals(this.bidPrice, v1QuoteTrade.bidPrice) &&
        Objects.equals(this.bidSize, v1QuoteTrade.bidSize) &&
        Objects.equals(this.lastTrade, v1QuoteTrade.lastTrade);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolId, timeExchange, timeCoinapi, askPrice, askSize, bidPrice, bidSize, lastTrade);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1QuoteTrade {\n");
    sb.append("    symbolId: ").append(toIndentedString(symbolId)).append("\n");
    sb.append("    timeExchange: ").append(toIndentedString(timeExchange)).append("\n");
    sb.append("    timeCoinapi: ").append(toIndentedString(timeCoinapi)).append("\n");
    sb.append("    askPrice: ").append(toIndentedString(askPrice)).append("\n");
    sb.append("    askSize: ").append(toIndentedString(askSize)).append("\n");
    sb.append("    bidPrice: ").append(toIndentedString(bidPrice)).append("\n");
    sb.append("    bidSize: ").append(toIndentedString(bidSize)).append("\n");
    sb.append("    lastTrade: ").append(toIndentedString(lastTrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol_id", "time_exchange", "time_coinapi", "ask_price", "ask_size", "bid_price", "bid_size", "last_trade"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1QuoteTrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1QuoteTrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in V1QuoteTrade is not found in the empty JSON string", V1QuoteTrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1QuoteTrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `V1QuoteTrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol_id") != null && !jsonObj.get("symbol_id").isJsonNull()) && !jsonObj.get("symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id").toString()));
      }
      // validate the optional field `last_trade`
      if (jsonObj.get("last_trade") != null && !jsonObj.get("last_trade").isJsonNull()) {
        V1LastTrade.validateJsonElement(jsonObj.get("last_trade"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1QuoteTrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1QuoteTrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1QuoteTrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1QuoteTrade.class));

       return (TypeAdapter<T>) new TypeAdapter<V1QuoteTrade>() {
           @Override
           public void write(JsonWriter out, V1QuoteTrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1QuoteTrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1QuoteTrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1QuoteTrade
   * @throws IOException if the JSON string is invalid with respect to V1QuoteTrade
   */
  public static V1QuoteTrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1QuoteTrade.class);
  }

  /**
   * Convert an instance of V1QuoteTrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

