/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the base model for order book data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:05:17.642900017Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class V1OrderBookBase {
  public static final String SERIALIZED_NAME_SYMBOL_ID = "symbol_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID)
  @javax.annotation.Nullable
  private String symbolId;

  public static final String SERIALIZED_NAME_TIME_EXCHANGE = "time_exchange";
  @SerializedName(SERIALIZED_NAME_TIME_EXCHANGE)
  @javax.annotation.Nullable
  private OffsetDateTime timeExchange;

  public static final String SERIALIZED_NAME_TIME_COINAPI = "time_coinapi";
  @SerializedName(SERIALIZED_NAME_TIME_COINAPI)
  @javax.annotation.Nullable
  private OffsetDateTime timeCoinapi;

  public static final String SERIALIZED_NAME_ASKS = "asks";
  @SerializedName(SERIALIZED_NAME_ASKS)
  @javax.annotation.Nullable
  private Object asks = null;

  public static final String SERIALIZED_NAME_BIDS = "bids";
  @SerializedName(SERIALIZED_NAME_BIDS)
  @javax.annotation.Nullable
  private Object bids = null;

  public V1OrderBookBase() {
  }

  public V1OrderBookBase symbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * The symbol identifier.
   * @return symbolId
   */
  @javax.annotation.Nullable
  public String getSymbolId() {
    return symbolId;
  }

  public void setSymbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
  }


  public V1OrderBookBase timeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
    return this;
  }

  /**
   * The exchange time of the order book.
   * @return timeExchange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeExchange() {
    return timeExchange;
  }

  public void setTimeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
  }


  public V1OrderBookBase timeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
    return this;
  }

  /**
   * The CoinAPI time when the order book was received.
   * @return timeCoinapi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCoinapi() {
    return timeCoinapi;
  }

  public void setTimeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
  }


  public V1OrderBookBase asks(@javax.annotation.Nullable Object asks) {
    this.asks = asks;
    return this;
  }

  /**
   * The asks made by market makers.
   * @return asks
   */
  @javax.annotation.Nullable
  public Object getAsks() {
    return asks;
  }

  public void setAsks(@javax.annotation.Nullable Object asks) {
    this.asks = asks;
  }


  public V1OrderBookBase bids(@javax.annotation.Nullable Object bids) {
    this.bids = bids;
    return this;
  }

  /**
   * The bids made by market makers.
   * @return bids
   */
  @javax.annotation.Nullable
  public Object getBids() {
    return bids;
  }

  public void setBids(@javax.annotation.Nullable Object bids) {
    this.bids = bids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1OrderBookBase v1OrderBookBase = (V1OrderBookBase) o;
    return Objects.equals(this.symbolId, v1OrderBookBase.symbolId) &&
        Objects.equals(this.timeExchange, v1OrderBookBase.timeExchange) &&
        Objects.equals(this.timeCoinapi, v1OrderBookBase.timeCoinapi) &&
        Objects.equals(this.asks, v1OrderBookBase.asks) &&
        Objects.equals(this.bids, v1OrderBookBase.bids);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolId, timeExchange, timeCoinapi, asks, bids);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1OrderBookBase {\n");
    sb.append("    symbolId: ").append(toIndentedString(symbolId)).append("\n");
    sb.append("    timeExchange: ").append(toIndentedString(timeExchange)).append("\n");
    sb.append("    timeCoinapi: ").append(toIndentedString(timeCoinapi)).append("\n");
    sb.append("    asks: ").append(toIndentedString(asks)).append("\n");
    sb.append("    bids: ").append(toIndentedString(bids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol_id", "time_exchange", "time_coinapi", "asks", "bids"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1OrderBookBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1OrderBookBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1OrderBookBase is not found in the empty JSON string", V1OrderBookBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1OrderBookBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1OrderBookBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol_id") != null && !jsonObj.get("symbol_id").isJsonNull()) && !jsonObj.get("symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1OrderBookBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1OrderBookBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1OrderBookBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1OrderBookBase.class));

       return (TypeAdapter<T>) new TypeAdapter<V1OrderBookBase>() {
           @Override
           public void write(JsonWriter out, V1OrderBookBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1OrderBookBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1OrderBookBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1OrderBookBase
   * @throws IOException if the JSON string is invalid with respect to V1OrderBookBase
   */
  public static V1OrderBookBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1OrderBookBase.class);
  }

  /**
   * Convert an instance of V1OrderBookBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

