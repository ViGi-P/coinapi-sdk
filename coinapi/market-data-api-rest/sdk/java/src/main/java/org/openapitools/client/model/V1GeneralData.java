/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representation of general metric data. This class is an XML type with name &#39;general_data&#39; and inherits from the BaseCsvModel class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:05:17.642900017Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class V1GeneralData {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_EXCHANGE_ID = "exchange_id";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_ID)
  @javax.annotation.Nullable
  private String exchangeId;

  public static final String SERIALIZED_NAME_ASSET_ID = "asset_id";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  @javax.annotation.Nullable
  private String assetId;

  public static final String SERIALIZED_NAME_SYMBOL_ID = "symbol_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID)
  @javax.annotation.Nullable
  private String symbolId;

  public static final String SERIALIZED_NAME_METRIC_ID = "metric_id";
  @SerializedName(SERIALIZED_NAME_METRIC_ID)
  @javax.annotation.Nullable
  private String metricId;

  public static final String SERIALIZED_NAME_VALUE_DECIMAL = "value_decimal";
  @SerializedName(SERIALIZED_NAME_VALUE_DECIMAL)
  @javax.annotation.Nullable
  private Double valueDecimal;

  public static final String SERIALIZED_NAME_VALUE_TEXT = "value_text";
  @SerializedName(SERIALIZED_NAME_VALUE_TEXT)
  @javax.annotation.Nullable
  private String valueText;

  public static final String SERIALIZED_NAME_VALUE_TIME = "value_time";
  @SerializedName(SERIALIZED_NAME_VALUE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime valueTime;

  public V1GeneralData() {
  }

  public V1GeneralData entryTime(@javax.annotation.Nullable OffsetDateTime entryTime) {
    this.entryTime = entryTime;
    return this;
  }

  /**
   * Gets or sets the entry time for the data point.
   * @return entryTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }

  public void setEntryTime(@javax.annotation.Nullable OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public V1GeneralData recvTime(@javax.annotation.Nullable OffsetDateTime recvTime) {
    this.recvTime = recvTime;
    return this;
  }

  /**
   * Gets or sets the received time for the data point.
   * @return recvTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }

  public void setRecvTime(@javax.annotation.Nullable OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public V1GeneralData exchangeId(@javax.annotation.Nullable String exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

  /**
   * Gets or sets the identifier for the exchange.
   * @return exchangeId
   */
  @javax.annotation.Nullable
  public String getExchangeId() {
    return exchangeId;
  }

  public void setExchangeId(@javax.annotation.Nullable String exchangeId) {
    this.exchangeId = exchangeId;
  }


  public V1GeneralData assetId(@javax.annotation.Nullable String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Gets or sets the identifier for the asset.
   * @return assetId
   */
  @javax.annotation.Nullable
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(@javax.annotation.Nullable String assetId) {
    this.assetId = assetId;
  }


  public V1GeneralData symbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * Gets or sets the identifier for the symbol.
   * @return symbolId
   */
  @javax.annotation.Nullable
  public String getSymbolId() {
    return symbolId;
  }

  public void setSymbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
  }


  public V1GeneralData metricId(@javax.annotation.Nullable String metricId) {
    this.metricId = metricId;
    return this;
  }

  /**
   * Gets or sets the identifier for the metric.
   * @return metricId
   */
  @javax.annotation.Nullable
  public String getMetricId() {
    return metricId;
  }

  public void setMetricId(@javax.annotation.Nullable String metricId) {
    this.metricId = metricId;
  }


  public V1GeneralData valueDecimal(@javax.annotation.Nullable Double valueDecimal) {
    this.valueDecimal = valueDecimal;
    return this;
  }

  /**
   * Gets or sets the decimal value for the metric.
   * @return valueDecimal
   */
  @javax.annotation.Nullable
  public Double getValueDecimal() {
    return valueDecimal;
  }

  public void setValueDecimal(@javax.annotation.Nullable Double valueDecimal) {
    this.valueDecimal = valueDecimal;
  }


  public V1GeneralData valueText(@javax.annotation.Nullable String valueText) {
    this.valueText = valueText;
    return this;
  }

  /**
   * Gets or sets the textual representation of the value for the metric.
   * @return valueText
   */
  @javax.annotation.Nullable
  public String getValueText() {
    return valueText;
  }

  public void setValueText(@javax.annotation.Nullable String valueText) {
    this.valueText = valueText;
  }


  public V1GeneralData valueTime(@javax.annotation.Nullable OffsetDateTime valueTime) {
    this.valueTime = valueTime;
    return this;
  }

  /**
   * Gets or sets the timestamp value for the metric.
   * @return valueTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueTime() {
    return valueTime;
  }

  public void setValueTime(@javax.annotation.Nullable OffsetDateTime valueTime) {
    this.valueTime = valueTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1GeneralData v1GeneralData = (V1GeneralData) o;
    return Objects.equals(this.entryTime, v1GeneralData.entryTime) &&
        Objects.equals(this.recvTime, v1GeneralData.recvTime) &&
        Objects.equals(this.exchangeId, v1GeneralData.exchangeId) &&
        Objects.equals(this.assetId, v1GeneralData.assetId) &&
        Objects.equals(this.symbolId, v1GeneralData.symbolId) &&
        Objects.equals(this.metricId, v1GeneralData.metricId) &&
        Objects.equals(this.valueDecimal, v1GeneralData.valueDecimal) &&
        Objects.equals(this.valueText, v1GeneralData.valueText) &&
        Objects.equals(this.valueTime, v1GeneralData.valueTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, exchangeId, assetId, symbolId, metricId, valueDecimal, valueText, valueTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1GeneralData {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    symbolId: ").append(toIndentedString(symbolId)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    valueDecimal: ").append(toIndentedString(valueDecimal)).append("\n");
    sb.append("    valueText: ").append(toIndentedString(valueText)).append("\n");
    sb.append("    valueTime: ").append(toIndentedString(valueTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("entry_time", "recv_time", "exchange_id", "asset_id", "symbol_id", "metric_id", "value_decimal", "value_text", "value_time"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1GeneralData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1GeneralData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1GeneralData is not found in the empty JSON string", V1GeneralData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1GeneralData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1GeneralData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exchange_id") != null && !jsonObj.get("exchange_id").isJsonNull()) && !jsonObj.get("exchange_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange_id").toString()));
      }
      if ((jsonObj.get("asset_id") != null && !jsonObj.get("asset_id").isJsonNull()) && !jsonObj.get("asset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id").toString()));
      }
      if ((jsonObj.get("symbol_id") != null && !jsonObj.get("symbol_id").isJsonNull()) && !jsonObj.get("symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id").toString()));
      }
      if ((jsonObj.get("metric_id") != null && !jsonObj.get("metric_id").isJsonNull()) && !jsonObj.get("metric_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric_id").toString()));
      }
      if ((jsonObj.get("value_text") != null && !jsonObj.get("value_text").isJsonNull()) && !jsonObj.get("value_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1GeneralData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1GeneralData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1GeneralData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1GeneralData.class));

       return (TypeAdapter<T>) new TypeAdapter<V1GeneralData>() {
           @Override
           public void write(JsonWriter out, V1GeneralData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1GeneralData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1GeneralData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1GeneralData
   * @throws IOException if the JSON string is invalid with respect to V1GeneralData
   */
  public static V1GeneralData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1GeneralData.class);
  }

  /**
   * Convert an instance of V1GeneralData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

