/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a trade executed on the exchange.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:05:17.642900017Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class V1Trade {
  public static final String SERIALIZED_NAME_SYMBOL_ID = "symbol_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ID)
  @javax.annotation.Nullable
  private String symbolId;

  public static final String SERIALIZED_NAME_TIME_EXCHANGE = "time_exchange";
  @SerializedName(SERIALIZED_NAME_TIME_EXCHANGE)
  @javax.annotation.Nullable
  private OffsetDateTime timeExchange;

  public static final String SERIALIZED_NAME_TIME_COINAPI = "time_coinapi";
  @SerializedName(SERIALIZED_NAME_TIME_COINAPI)
  @javax.annotation.Nullable
  private OffsetDateTime timeCoinapi;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nullable
  private UUID uuid;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private Double price;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private Double size;

  public static final String SERIALIZED_NAME_TAKER_SIDE = "taker_side";
  @SerializedName(SERIALIZED_NAME_TAKER_SIDE)
  @javax.annotation.Nullable
  private String takerSide;

  public static final String SERIALIZED_NAME_ID_TRADE = "id_trade";
  @SerializedName(SERIALIZED_NAME_ID_TRADE)
  @javax.annotation.Nullable
  private String idTrade;

  public static final String SERIALIZED_NAME_ID_ORDER_MAKER = "id_order_maker";
  @SerializedName(SERIALIZED_NAME_ID_ORDER_MAKER)
  @javax.annotation.Nullable
  private String idOrderMaker;

  public static final String SERIALIZED_NAME_ID_ORDER_TAKER = "id_order_taker";
  @SerializedName(SERIALIZED_NAME_ID_ORDER_TAKER)
  @javax.annotation.Nullable
  private String idOrderTaker;

  public V1Trade() {
  }

  public V1Trade symbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * The symbol identifier.
   * @return symbolId
   */
  @javax.annotation.Nullable
  public String getSymbolId() {
    return symbolId;
  }

  public void setSymbolId(@javax.annotation.Nullable String symbolId) {
    this.symbolId = symbolId;
  }


  public V1Trade timeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
    return this;
  }

  /**
   * The time of trade reported by the exchange.
   * @return timeExchange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeExchange() {
    return timeExchange;
  }

  public void setTimeExchange(@javax.annotation.Nullable OffsetDateTime timeExchange) {
    this.timeExchange = timeExchange;
  }


  public V1Trade timeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
    return this;
  }

  /**
   * The time when the trade was received by CoinAPI.
   * @return timeCoinapi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCoinapi() {
    return timeCoinapi;
  }

  public void setTimeCoinapi(@javax.annotation.Nullable OffsetDateTime timeCoinapi) {
    this.timeCoinapi = timeCoinapi;
  }


  public V1Trade uuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The unique identifier for the trade.
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
  }


  public V1Trade price(@javax.annotation.Nullable Double price) {
    this.price = price;
    return this;
  }

  /**
   * The price of the transaction.
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable Double price) {
    this.price = price;
  }


  public V1Trade size(@javax.annotation.Nullable Double size) {
    this.size = size;
    return this;
  }

  /**
   * The base asset amount traded in the transaction.
   * @return size
   */
  @javax.annotation.Nullable
  public Double getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable Double size) {
    this.size = size;
  }


  public V1Trade takerSide(@javax.annotation.Nullable String takerSide) {
    this.takerSide = takerSide;
    return this;
  }

  /**
   * The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).
   * @return takerSide
   */
  @javax.annotation.Nullable
  public String getTakerSide() {
    return takerSide;
  }

  public void setTakerSide(@javax.annotation.Nullable String takerSide) {
    this.takerSide = takerSide;
  }


  public V1Trade idTrade(@javax.annotation.Nullable String idTrade) {
    this.idTrade = idTrade;
    return this;
  }

  /**
   * The trade identifier.
   * @return idTrade
   */
  @javax.annotation.Nullable
  public String getIdTrade() {
    return idTrade;
  }

  public void setIdTrade(@javax.annotation.Nullable String idTrade) {
    this.idTrade = idTrade;
  }


  public V1Trade idOrderMaker(@javax.annotation.Nullable String idOrderMaker) {
    this.idOrderMaker = idOrderMaker;
    return this;
  }

  /**
   * The order maker identifier.
   * @return idOrderMaker
   */
  @javax.annotation.Nullable
  public String getIdOrderMaker() {
    return idOrderMaker;
  }

  public void setIdOrderMaker(@javax.annotation.Nullable String idOrderMaker) {
    this.idOrderMaker = idOrderMaker;
  }


  public V1Trade idOrderTaker(@javax.annotation.Nullable String idOrderTaker) {
    this.idOrderTaker = idOrderTaker;
    return this;
  }

  /**
   * The order taker identifier.
   * @return idOrderTaker
   */
  @javax.annotation.Nullable
  public String getIdOrderTaker() {
    return idOrderTaker;
  }

  public void setIdOrderTaker(@javax.annotation.Nullable String idOrderTaker) {
    this.idOrderTaker = idOrderTaker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Trade v1Trade = (V1Trade) o;
    return Objects.equals(this.symbolId, v1Trade.symbolId) &&
        Objects.equals(this.timeExchange, v1Trade.timeExchange) &&
        Objects.equals(this.timeCoinapi, v1Trade.timeCoinapi) &&
        Objects.equals(this.uuid, v1Trade.uuid) &&
        Objects.equals(this.price, v1Trade.price) &&
        Objects.equals(this.size, v1Trade.size) &&
        Objects.equals(this.takerSide, v1Trade.takerSide) &&
        Objects.equals(this.idTrade, v1Trade.idTrade) &&
        Objects.equals(this.idOrderMaker, v1Trade.idOrderMaker) &&
        Objects.equals(this.idOrderTaker, v1Trade.idOrderTaker);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolId, timeExchange, timeCoinapi, uuid, price, size, takerSide, idTrade, idOrderMaker, idOrderTaker);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Trade {\n");
    sb.append("    symbolId: ").append(toIndentedString(symbolId)).append("\n");
    sb.append("    timeExchange: ").append(toIndentedString(timeExchange)).append("\n");
    sb.append("    timeCoinapi: ").append(toIndentedString(timeCoinapi)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    takerSide: ").append(toIndentedString(takerSide)).append("\n");
    sb.append("    idTrade: ").append(toIndentedString(idTrade)).append("\n");
    sb.append("    idOrderMaker: ").append(toIndentedString(idOrderMaker)).append("\n");
    sb.append("    idOrderTaker: ").append(toIndentedString(idOrderTaker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol_id", "time_exchange", "time_coinapi", "uuid", "price", "size", "taker_side", "id_trade", "id_order_maker", "id_order_taker"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Trade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Trade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Trade is not found in the empty JSON string", V1Trade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Trade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Trade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol_id") != null && !jsonObj.get("symbol_id").isJsonNull()) && !jsonObj.get("symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_id").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("taker_side") != null && !jsonObj.get("taker_side").isJsonNull()) && !jsonObj.get("taker_side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taker_side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taker_side").toString()));
      }
      if ((jsonObj.get("id_trade") != null && !jsonObj.get("id_trade").isJsonNull()) && !jsonObj.get("id_trade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_trade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_trade").toString()));
      }
      if ((jsonObj.get("id_order_maker") != null && !jsonObj.get("id_order_maker").isJsonNull()) && !jsonObj.get("id_order_maker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_order_maker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_order_maker").toString()));
      }
      if ((jsonObj.get("id_order_taker") != null && !jsonObj.get("id_order_taker").isJsonNull()) && !jsonObj.get("id_order_taker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_order_taker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_order_taker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Trade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Trade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Trade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Trade.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Trade>() {
           @Override
           public void write(JsonWriter out, V1Trade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Trade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Trade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Trade
   * @throws IOException if the JSON string is invalid with respect to V1Trade
   */
  public static V1Trade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Trade.class);
  }

  /**
   * Convert an instance of V1Trade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

