/*
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * Represents an exchange rate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T06:07:54.547867863Z[Etc/UTC]", comments = "Generator version: 7.16.0")
public class V1ExchangeRate {
  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_ASSET_ID_BASE = "asset_id_base";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_BASE)
  @javax.annotation.Nullable
  private String assetIdBase;

  public static final String SERIALIZED_NAME_ASSET_ID_QUOTE = "asset_id_quote";
  @SerializedName(SERIALIZED_NAME_ASSET_ID_QUOTE)
  @javax.annotation.Nullable
  private String assetIdQuote;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  @javax.annotation.Nullable
  private Double rate;

  public V1ExchangeRate() {
  }

  public V1ExchangeRate time(@javax.annotation.Nullable OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Gets or sets the time of the exchange rate.
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable OffsetDateTime time) {
    this.time = time;
  }


  public V1ExchangeRate assetIdBase(@javax.annotation.Nullable String assetIdBase) {
    this.assetIdBase = assetIdBase;
    return this;
  }

  /**
   * Gets or sets the base asset ID of the exchange rate.
   * @return assetIdBase
   */
  @javax.annotation.Nullable
  public String getAssetIdBase() {
    return assetIdBase;
  }

  public void setAssetIdBase(@javax.annotation.Nullable String assetIdBase) {
    this.assetIdBase = assetIdBase;
  }


  public V1ExchangeRate assetIdQuote(@javax.annotation.Nullable String assetIdQuote) {
    this.assetIdQuote = assetIdQuote;
    return this;
  }

  /**
   * Gets or sets the quote asset ID of the exchange rate.
   * @return assetIdQuote
   */
  @javax.annotation.Nullable
  public String getAssetIdQuote() {
    return assetIdQuote;
  }

  public void setAssetIdQuote(@javax.annotation.Nullable String assetIdQuote) {
    this.assetIdQuote = assetIdQuote;
  }


  public V1ExchangeRate rate(@javax.annotation.Nullable Double rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Gets or sets the exchange rate value.
   * @return rate
   */
  @javax.annotation.Nullable
  public Double getRate() {
    return rate;
  }

  public void setRate(@javax.annotation.Nullable Double rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ExchangeRate v1ExchangeRate = (V1ExchangeRate) o;
    return Objects.equals(this.time, v1ExchangeRate.time) &&
        Objects.equals(this.assetIdBase, v1ExchangeRate.assetIdBase) &&
        Objects.equals(this.assetIdQuote, v1ExchangeRate.assetIdQuote) &&
        Objects.equals(this.rate, v1ExchangeRate.rate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, assetIdBase, assetIdQuote, rate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ExchangeRate {\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    assetIdBase: ").append(toIndentedString(assetIdBase)).append("\n");
    sb.append("    assetIdQuote: ").append(toIndentedString(assetIdQuote)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("time", "asset_id_base", "asset_id_quote", "rate"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1ExchangeRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1ExchangeRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in V1ExchangeRate is not found in the empty JSON string", V1ExchangeRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1ExchangeRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `V1ExchangeRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asset_id_base") != null && !jsonObj.get("asset_id_base").isJsonNull()) && !jsonObj.get("asset_id_base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_base").toString()));
      }
      if ((jsonObj.get("asset_id_quote") != null && !jsonObj.get("asset_id_quote").isJsonNull()) && !jsonObj.get("asset_id_quote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asset_id_quote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id_quote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ExchangeRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ExchangeRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ExchangeRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ExchangeRate.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ExchangeRate>() {
           @Override
           public void write(JsonWriter out, V1ExchangeRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ExchangeRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1ExchangeRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1ExchangeRate
   * @throws IOException if the JSON string is invalid with respect to V1ExchangeRate
   */
  public static V1ExchangeRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ExchangeRate.class);
  }

  /**
   * Convert an instance of V1ExchangeRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

