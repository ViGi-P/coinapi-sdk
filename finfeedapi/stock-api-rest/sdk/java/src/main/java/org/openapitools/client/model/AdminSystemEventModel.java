/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for system event information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:07:59.075795092Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AdminSystemEventModel {
  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SYSTEM_EVENT = "system_event";
  @SerializedName(SERIALIZED_NAME_SYSTEM_EVENT)
  @javax.annotation.Nullable
  private Integer systemEvent;

  public static final String SERIALIZED_NAME_SYSTEM_EVENT_CODE = "system_event_code";
  @SerializedName(SERIALIZED_NAME_SYSTEM_EVENT_CODE)
  @javax.annotation.Nullable
  private String systemEventCode;

  public static final String SERIALIZED_NAME_SYSTEM_EVENT_TEXT = "system_event_text";
  @SerializedName(SERIALIZED_NAME_SYSTEM_EVENT_TEXT)
  @javax.annotation.Nullable
  private String systemEventText;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_MESSAGES = "is_system_event_start_of_messages";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_MESSAGES)
  @javax.annotation.Nullable
  private Boolean isSystemEventStartOfMessages;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_SYSTEM_HOURS = "is_system_event_start_of_system_hours";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_SYSTEM_HOURS)
  @javax.annotation.Nullable
  private Boolean isSystemEventStartOfSystemHours;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_REGULAR_MARKET_HOURS = "is_system_event_start_of_regular_market_hours";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_START_OF_REGULAR_MARKET_HOURS)
  @javax.annotation.Nullable
  private Boolean isSystemEventStartOfRegularMarketHours;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_REGULAR_MARKET_HOURS = "is_system_event_end_of_regular_market_hours";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_REGULAR_MARKET_HOURS)
  @javax.annotation.Nullable
  private Boolean isSystemEventEndOfRegularMarketHours;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_SYSTEM_HOURS = "is_system_event_end_of_system_hours";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_SYSTEM_HOURS)
  @javax.annotation.Nullable
  private Boolean isSystemEventEndOfSystemHours;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_MESSAGES = "is_system_event_end_of_messages";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EVENT_END_OF_MESSAGES)
  @javax.annotation.Nullable
  private Boolean isSystemEventEndOfMessages;

  public AdminSystemEventModel() {
  }

  public AdminSystemEventModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public AdminSystemEventModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the system event was recorded as DateTime
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AdminSystemEventModel systemEvent(@javax.annotation.Nullable Integer systemEvent) {
    this.systemEvent = systemEvent;
    return this;
  }

  /**
   * System event as byte value
   * @return systemEvent
   */
  @javax.annotation.Nullable
  public Integer getSystemEvent() {
    return systemEvent;
  }

  public void setSystemEvent(@javax.annotation.Nullable Integer systemEvent) {
    this.systemEvent = systemEvent;
  }


  public AdminSystemEventModel systemEventCode(@javax.annotation.Nullable String systemEventCode) {
    this.systemEventCode = systemEventCode;
    return this;
  }

  /**
   * System event as string
   * @return systemEventCode
   */
  @javax.annotation.Nullable
  public String getSystemEventCode() {
    return systemEventCode;
  }

  public void setSystemEventCode(@javax.annotation.Nullable String systemEventCode) {
    this.systemEventCode = systemEventCode;
  }


  public AdminSystemEventModel systemEventText(@javax.annotation.Nullable String systemEventText) {
    this.systemEventText = systemEventText;
    return this;
  }

  /**
   * Human-readable description of the system event
   * @return systemEventText
   */
  @javax.annotation.Nullable
  public String getSystemEventText() {
    return systemEventText;
  }

  public void setSystemEventText(@javax.annotation.Nullable String systemEventText) {
    this.systemEventText = systemEventText;
  }


  public AdminSystemEventModel isSystemEventStartOfMessages(@javax.annotation.Nullable Boolean isSystemEventStartOfMessages) {
    this.isSystemEventStartOfMessages = isSystemEventStartOfMessages;
    return this;
  }

  /**
   * Indicates if the system event is &#39;Start of Messages&#39; (O). Outside of heartbeat messages on the lower level protocol,  the start of day message is the first message sent in any trading session.
   * @return isSystemEventStartOfMessages
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventStartOfMessages() {
    return isSystemEventStartOfMessages;
  }

  public void setIsSystemEventStartOfMessages(@javax.annotation.Nullable Boolean isSystemEventStartOfMessages) {
    this.isSystemEventStartOfMessages = isSystemEventStartOfMessages;
  }


  public AdminSystemEventModel isSystemEventStartOfSystemHours(@javax.annotation.Nullable Boolean isSystemEventStartOfSystemHours) {
    this.isSystemEventStartOfSystemHours = isSystemEventStartOfSystemHours;
    return this;
  }

  /**
   * Indicates if the system event is &#39;Start of System Hours&#39; (S). This message indicates that IEX is open and ready to start accepting orders.
   * @return isSystemEventStartOfSystemHours
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventStartOfSystemHours() {
    return isSystemEventStartOfSystemHours;
  }

  public void setIsSystemEventStartOfSystemHours(@javax.annotation.Nullable Boolean isSystemEventStartOfSystemHours) {
    this.isSystemEventStartOfSystemHours = isSystemEventStartOfSystemHours;
  }


  public AdminSystemEventModel isSystemEventStartOfRegularMarketHours(@javax.annotation.Nullable Boolean isSystemEventStartOfRegularMarketHours) {
    this.isSystemEventStartOfRegularMarketHours = isSystemEventStartOfRegularMarketHours;
    return this;
  }

  /**
   * Indicates if the system event is &#39;Start of Regular Market Hours&#39; (R). This message indicates that DAY and GTX orders, as well as market orders and pegged orders,  are available for execution on IEX.
   * @return isSystemEventStartOfRegularMarketHours
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventStartOfRegularMarketHours() {
    return isSystemEventStartOfRegularMarketHours;
  }

  public void setIsSystemEventStartOfRegularMarketHours(@javax.annotation.Nullable Boolean isSystemEventStartOfRegularMarketHours) {
    this.isSystemEventStartOfRegularMarketHours = isSystemEventStartOfRegularMarketHours;
  }


  public AdminSystemEventModel isSystemEventEndOfRegularMarketHours(@javax.annotation.Nullable Boolean isSystemEventEndOfRegularMarketHours) {
    this.isSystemEventEndOfRegularMarketHours = isSystemEventEndOfRegularMarketHours;
    return this;
  }

  /**
   * Indicates if the system event is &#39;End of Regular Market Hours&#39; (M). This message indicates that DAY orders, market orders, and pegged orders  are no longer accepted by IEX.
   * @return isSystemEventEndOfRegularMarketHours
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventEndOfRegularMarketHours() {
    return isSystemEventEndOfRegularMarketHours;
  }

  public void setIsSystemEventEndOfRegularMarketHours(@javax.annotation.Nullable Boolean isSystemEventEndOfRegularMarketHours) {
    this.isSystemEventEndOfRegularMarketHours = isSystemEventEndOfRegularMarketHours;
  }


  public AdminSystemEventModel isSystemEventEndOfSystemHours(@javax.annotation.Nullable Boolean isSystemEventEndOfSystemHours) {
    this.isSystemEventEndOfSystemHours = isSystemEventEndOfSystemHours;
    return this;
  }

  /**
   * Indicates if the system event is &#39;End of System Hours&#39; (E). This message indicates that IEX is now closed and will not accept  any new orders during this trading session. It is still possible  to receive messages after the end of day.
   * @return isSystemEventEndOfSystemHours
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventEndOfSystemHours() {
    return isSystemEventEndOfSystemHours;
  }

  public void setIsSystemEventEndOfSystemHours(@javax.annotation.Nullable Boolean isSystemEventEndOfSystemHours) {
    this.isSystemEventEndOfSystemHours = isSystemEventEndOfSystemHours;
  }


  public AdminSystemEventModel isSystemEventEndOfMessages(@javax.annotation.Nullable Boolean isSystemEventEndOfMessages) {
    this.isSystemEventEndOfMessages = isSystemEventEndOfMessages;
    return this;
  }

  /**
   * Indicates if the system event is &#39;End of Messages&#39; (C). This is always the last message sent in any trading session.
   * @return isSystemEventEndOfMessages
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemEventEndOfMessages() {
    return isSystemEventEndOfMessages;
  }

  public void setIsSystemEventEndOfMessages(@javax.annotation.Nullable Boolean isSystemEventEndOfMessages) {
    this.isSystemEventEndOfMessages = isSystemEventEndOfMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminSystemEventModel adminSystemEventModel = (AdminSystemEventModel) o;
    return Objects.equals(this.timestampNanos, adminSystemEventModel.timestampNanos) &&
        Objects.equals(this.timestamp, adminSystemEventModel.timestamp) &&
        Objects.equals(this.systemEvent, adminSystemEventModel.systemEvent) &&
        Objects.equals(this.systemEventCode, adminSystemEventModel.systemEventCode) &&
        Objects.equals(this.systemEventText, adminSystemEventModel.systemEventText) &&
        Objects.equals(this.isSystemEventStartOfMessages, adminSystemEventModel.isSystemEventStartOfMessages) &&
        Objects.equals(this.isSystemEventStartOfSystemHours, adminSystemEventModel.isSystemEventStartOfSystemHours) &&
        Objects.equals(this.isSystemEventStartOfRegularMarketHours, adminSystemEventModel.isSystemEventStartOfRegularMarketHours) &&
        Objects.equals(this.isSystemEventEndOfRegularMarketHours, adminSystemEventModel.isSystemEventEndOfRegularMarketHours) &&
        Objects.equals(this.isSystemEventEndOfSystemHours, adminSystemEventModel.isSystemEventEndOfSystemHours) &&
        Objects.equals(this.isSystemEventEndOfMessages, adminSystemEventModel.isSystemEventEndOfMessages);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestampNanos, timestamp, systemEvent, systemEventCode, systemEventText, isSystemEventStartOfMessages, isSystemEventStartOfSystemHours, isSystemEventStartOfRegularMarketHours, isSystemEventEndOfRegularMarketHours, isSystemEventEndOfSystemHours, isSystemEventEndOfMessages);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminSystemEventModel {\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    systemEvent: ").append(toIndentedString(systemEvent)).append("\n");
    sb.append("    systemEventCode: ").append(toIndentedString(systemEventCode)).append("\n");
    sb.append("    systemEventText: ").append(toIndentedString(systemEventText)).append("\n");
    sb.append("    isSystemEventStartOfMessages: ").append(toIndentedString(isSystemEventStartOfMessages)).append("\n");
    sb.append("    isSystemEventStartOfSystemHours: ").append(toIndentedString(isSystemEventStartOfSystemHours)).append("\n");
    sb.append("    isSystemEventStartOfRegularMarketHours: ").append(toIndentedString(isSystemEventStartOfRegularMarketHours)).append("\n");
    sb.append("    isSystemEventEndOfRegularMarketHours: ").append(toIndentedString(isSystemEventEndOfRegularMarketHours)).append("\n");
    sb.append("    isSystemEventEndOfSystemHours: ").append(toIndentedString(isSystemEventEndOfSystemHours)).append("\n");
    sb.append("    isSystemEventEndOfMessages: ").append(toIndentedString(isSystemEventEndOfMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("timestamp_nanos", "timestamp", "system_event", "system_event_code", "system_event_text", "is_system_event_start_of_messages", "is_system_event_start_of_system_hours", "is_system_event_start_of_regular_market_hours", "is_system_event_end_of_regular_market_hours", "is_system_event_end_of_system_hours", "is_system_event_end_of_messages"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminSystemEventModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminSystemEventModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminSystemEventModel is not found in the empty JSON string", AdminSystemEventModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminSystemEventModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminSystemEventModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("system_event_code") != null && !jsonObj.get("system_event_code").isJsonNull()) && !jsonObj.get("system_event_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_event_code").toString()));
      }
      if ((jsonObj.get("system_event_text") != null && !jsonObj.get("system_event_text").isJsonNull()) && !jsonObj.get("system_event_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_event_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_event_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminSystemEventModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminSystemEventModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminSystemEventModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminSystemEventModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminSystemEventModel>() {
           @Override
           public void write(JsonWriter out, AdminSystemEventModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminSystemEventModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminSystemEventModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminSystemEventModel
   * @throws IOException if the JSON string is invalid with respect to AdminSystemEventModel
   */
  public static AdminSystemEventModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminSystemEventModel.class);
  }

  /**
   * Convert an instance of AdminSystemEventModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

