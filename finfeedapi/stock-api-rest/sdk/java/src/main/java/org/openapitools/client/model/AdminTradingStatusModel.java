/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for trading status information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T06:10:31.348068192Z[Etc/UTC]", comments = "Generator version: 7.16.0")
public class AdminTradingStatusModel {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_IS_TRADING_LIVE = "is_trading_live";
  @SerializedName(SERIALIZED_NAME_IS_TRADING_LIVE)
  @javax.annotation.Nullable
  private Boolean isTradingLive;

  public static final String SERIALIZED_NAME_IS_TRADING_HALTED = "is_trading_halted";
  @SerializedName(SERIALIZED_NAME_IS_TRADING_HALTED)
  @javax.annotation.Nullable
  private Boolean isTradingHalted;

  public static final String SERIALIZED_NAME_IS_TRADING_IN_ORDER_ACCEPTANCE_PERIOD = "is_trading_in_order_acceptance_period";
  @SerializedName(SERIALIZED_NAME_IS_TRADING_IN_ORDER_ACCEPTANCE_PERIOD)
  @javax.annotation.Nullable
  private Boolean isTradingInOrderAcceptancePeriod;

  public static final String SERIALIZED_NAME_IS_TRADING_PAUSED = "is_trading_paused";
  @SerializedName(SERIALIZED_NAME_IS_TRADING_PAUSED)
  @javax.annotation.Nullable
  private Boolean isTradingPaused;

  public static final String SERIALIZED_NAME_IS_REASON_HALT_NEWS_PENDING = "is_reason_halt_news_pending";
  @SerializedName(SERIALIZED_NAME_IS_REASON_HALT_NEWS_PENDING)
  @javax.annotation.Nullable
  private Boolean isReasonHaltNewsPending;

  public static final String SERIALIZED_NAME_IS_REASON_IPO_NOT_YET_TRADING = "is_reason_ipo_not_yet_trading";
  @SerializedName(SERIALIZED_NAME_IS_REASON_IPO_NOT_YET_TRADING)
  @javax.annotation.Nullable
  private Boolean isReasonIpoNotYetTrading;

  public static final String SERIALIZED_NAME_IS_REASON_IPO_DEFERRED = "is_reason_ipo_deferred";
  @SerializedName(SERIALIZED_NAME_IS_REASON_IPO_DEFERRED)
  @javax.annotation.Nullable
  private Boolean isReasonIpoDeferred;

  public static final String SERIALIZED_NAME_IS_REASON_HALT_NEWS_DISSEMINATION = "is_reason_halt_news_dissemination";
  @SerializedName(SERIALIZED_NAME_IS_REASON_HALT_NEWS_DISSEMINATION)
  @javax.annotation.Nullable
  private Boolean isReasonHaltNewsDissemination;

  public static final String SERIALIZED_NAME_IS_REASON_IPO_ORDER_ACCEPTANCE_PERIOD = "is_reason_ipo_order_acceptance_period";
  @SerializedName(SERIALIZED_NAME_IS_REASON_IPO_ORDER_ACCEPTANCE_PERIOD)
  @javax.annotation.Nullable
  private Boolean isReasonIpoOrderAcceptancePeriod;

  public static final String SERIALIZED_NAME_IS_REASON_IPO_PRE_LAUNCH_PERIOD = "is_reason_ipo_pre_launch_period";
  @SerializedName(SERIALIZED_NAME_IS_REASON_IPO_PRE_LAUNCH_PERIOD)
  @javax.annotation.Nullable
  private Boolean isReasonIpoPreLaunchPeriod;

  public static final String SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL1 = "is_reason_market_wide_circuit_breaker_level1";
  @SerializedName(SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL1)
  @javax.annotation.Nullable
  private Boolean isReasonMarketWideCircuitBreakerLevel1;

  public static final String SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL2 = "is_reason_market_wide_circuit_breaker_level2";
  @SerializedName(SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL2)
  @javax.annotation.Nullable
  private Boolean isReasonMarketWideCircuitBreakerLevel2;

  public static final String SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL3 = "is_reason_market_wide_circuit_breaker_level3";
  @SerializedName(SERIALIZED_NAME_IS_REASON_MARKET_WIDE_CIRCUIT_BREAKER_LEVEL3)
  @javax.annotation.Nullable
  private Boolean isReasonMarketWideCircuitBreakerLevel3;

  public static final String SERIALIZED_NAME_IS_REASON_NOT_APPLICABLE = "is_reason_not_applicable";
  @SerializedName(SERIALIZED_NAME_IS_REASON_NOT_APPLICABLE)
  @javax.annotation.Nullable
  private Boolean isReasonNotApplicable;

  public static final String SERIALIZED_NAME_IS_REASON_NOT_AVAILABLE = "is_reason_not_available";
  @SerializedName(SERIALIZED_NAME_IS_REASON_NOT_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean isReasonNotAvailable;

  public AdminTradingStatusModel() {
  }

  public AdminTradingStatusModel symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The stock symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public AdminTradingStatusModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public AdminTradingStatusModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the trading status was recorded as DateTime
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AdminTradingStatusModel isTradingLive(@javax.annotation.Nullable Boolean isTradingLive) {
    this.isTradingLive = isTradingLive;
    return this;
  }

  /**
   * Gets whether the security is currently trading on IEX
   * @return isTradingLive
   */
  @javax.annotation.Nullable
  public Boolean getIsTradingLive() {
    return isTradingLive;
  }

  public void setIsTradingLive(@javax.annotation.Nullable Boolean isTradingLive) {
    this.isTradingLive = isTradingLive;
  }


  public AdminTradingStatusModel isTradingHalted(@javax.annotation.Nullable Boolean isTradingHalted) {
    this.isTradingHalted = isTradingHalted;
    return this;
  }

  /**
   * Gets whether the security is halted across all US equity markets
   * @return isTradingHalted
   */
  @javax.annotation.Nullable
  public Boolean getIsTradingHalted() {
    return isTradingHalted;
  }

  public void setIsTradingHalted(@javax.annotation.Nullable Boolean isTradingHalted) {
    this.isTradingHalted = isTradingHalted;
  }


  public AdminTradingStatusModel isTradingInOrderAcceptancePeriod(@javax.annotation.Nullable Boolean isTradingInOrderAcceptancePeriod) {
    this.isTradingInOrderAcceptancePeriod = isTradingInOrderAcceptancePeriod;
    return this;
  }

  /**
   * Gets whether the security is in Order Acceptance Period on IEX
   * @return isTradingInOrderAcceptancePeriod
   */
  @javax.annotation.Nullable
  public Boolean getIsTradingInOrderAcceptancePeriod() {
    return isTradingInOrderAcceptancePeriod;
  }

  public void setIsTradingInOrderAcceptancePeriod(@javax.annotation.Nullable Boolean isTradingInOrderAcceptancePeriod) {
    this.isTradingInOrderAcceptancePeriod = isTradingInOrderAcceptancePeriod;
  }


  public AdminTradingStatusModel isTradingPaused(@javax.annotation.Nullable Boolean isTradingPaused) {
    this.isTradingPaused = isTradingPaused;
    return this;
  }

  /**
   * Gets whether the security is paused and in Order Acceptance Period on IEX
   * @return isTradingPaused
   */
  @javax.annotation.Nullable
  public Boolean getIsTradingPaused() {
    return isTradingPaused;
  }

  public void setIsTradingPaused(@javax.annotation.Nullable Boolean isTradingPaused) {
    this.isTradingPaused = isTradingPaused;
  }


  public AdminTradingStatusModel isReasonHaltNewsPending(@javax.annotation.Nullable Boolean isReasonHaltNewsPending) {
    this.isReasonHaltNewsPending = isReasonHaltNewsPending;
    return this;
  }

  /**
   * Gets whether the halt reason is News Pending
   * @return isReasonHaltNewsPending
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonHaltNewsPending() {
    return isReasonHaltNewsPending;
  }

  public void setIsReasonHaltNewsPending(@javax.annotation.Nullable Boolean isReasonHaltNewsPending) {
    this.isReasonHaltNewsPending = isReasonHaltNewsPending;
  }


  public AdminTradingStatusModel isReasonIpoNotYetTrading(@javax.annotation.Nullable Boolean isReasonIpoNotYetTrading) {
    this.isReasonIpoNotYetTrading = isReasonIpoNotYetTrading;
    return this;
  }

  /**
   * Gets whether the halt reason is IPO Not Yet Trading
   * @return isReasonIpoNotYetTrading
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonIpoNotYetTrading() {
    return isReasonIpoNotYetTrading;
  }

  public void setIsReasonIpoNotYetTrading(@javax.annotation.Nullable Boolean isReasonIpoNotYetTrading) {
    this.isReasonIpoNotYetTrading = isReasonIpoNotYetTrading;
  }


  public AdminTradingStatusModel isReasonIpoDeferred(@javax.annotation.Nullable Boolean isReasonIpoDeferred) {
    this.isReasonIpoDeferred = isReasonIpoDeferred;
    return this;
  }

  /**
   * Gets whether the halt reason is IPO Deferred
   * @return isReasonIpoDeferred
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonIpoDeferred() {
    return isReasonIpoDeferred;
  }

  public void setIsReasonIpoDeferred(@javax.annotation.Nullable Boolean isReasonIpoDeferred) {
    this.isReasonIpoDeferred = isReasonIpoDeferred;
  }


  public AdminTradingStatusModel isReasonHaltNewsDissemination(@javax.annotation.Nullable Boolean isReasonHaltNewsDissemination) {
    this.isReasonHaltNewsDissemination = isReasonHaltNewsDissemination;
    return this;
  }

  /**
   * Gets whether the order acceptance period reason is Halt News Dissemination
   * @return isReasonHaltNewsDissemination
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonHaltNewsDissemination() {
    return isReasonHaltNewsDissemination;
  }

  public void setIsReasonHaltNewsDissemination(@javax.annotation.Nullable Boolean isReasonHaltNewsDissemination) {
    this.isReasonHaltNewsDissemination = isReasonHaltNewsDissemination;
  }


  public AdminTradingStatusModel isReasonIpoOrderAcceptancePeriod(@javax.annotation.Nullable Boolean isReasonIpoOrderAcceptancePeriod) {
    this.isReasonIpoOrderAcceptancePeriod = isReasonIpoOrderAcceptancePeriod;
    return this;
  }

  /**
   * Gets whether the order acceptance period reason is IPO Order Acceptance Period
   * @return isReasonIpoOrderAcceptancePeriod
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonIpoOrderAcceptancePeriod() {
    return isReasonIpoOrderAcceptancePeriod;
  }

  public void setIsReasonIpoOrderAcceptancePeriod(@javax.annotation.Nullable Boolean isReasonIpoOrderAcceptancePeriod) {
    this.isReasonIpoOrderAcceptancePeriod = isReasonIpoOrderAcceptancePeriod;
  }


  public AdminTradingStatusModel isReasonIpoPreLaunchPeriod(@javax.annotation.Nullable Boolean isReasonIpoPreLaunchPeriod) {
    this.isReasonIpoPreLaunchPeriod = isReasonIpoPreLaunchPeriod;
    return this;
  }

  /**
   * Gets whether the order acceptance period reason is IPO Pre-Launch Period
   * @return isReasonIpoPreLaunchPeriod
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonIpoPreLaunchPeriod() {
    return isReasonIpoPreLaunchPeriod;
  }

  public void setIsReasonIpoPreLaunchPeriod(@javax.annotation.Nullable Boolean isReasonIpoPreLaunchPeriod) {
    this.isReasonIpoPreLaunchPeriod = isReasonIpoPreLaunchPeriod;
  }


  public AdminTradingStatusModel isReasonMarketWideCircuitBreakerLevel1(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel1) {
    this.isReasonMarketWideCircuitBreakerLevel1 = isReasonMarketWideCircuitBreakerLevel1;
    return this;
  }

  /**
   * Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached
   * @return isReasonMarketWideCircuitBreakerLevel1
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonMarketWideCircuitBreakerLevel1() {
    return isReasonMarketWideCircuitBreakerLevel1;
  }

  public void setIsReasonMarketWideCircuitBreakerLevel1(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel1) {
    this.isReasonMarketWideCircuitBreakerLevel1 = isReasonMarketWideCircuitBreakerLevel1;
  }


  public AdminTradingStatusModel isReasonMarketWideCircuitBreakerLevel2(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel2) {
    this.isReasonMarketWideCircuitBreakerLevel2 = isReasonMarketWideCircuitBreakerLevel2;
    return this;
  }

  /**
   * Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached
   * @return isReasonMarketWideCircuitBreakerLevel2
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonMarketWideCircuitBreakerLevel2() {
    return isReasonMarketWideCircuitBreakerLevel2;
  }

  public void setIsReasonMarketWideCircuitBreakerLevel2(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel2) {
    this.isReasonMarketWideCircuitBreakerLevel2 = isReasonMarketWideCircuitBreakerLevel2;
  }


  public AdminTradingStatusModel isReasonMarketWideCircuitBreakerLevel3(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel3) {
    this.isReasonMarketWideCircuitBreakerLevel3 = isReasonMarketWideCircuitBreakerLevel3;
    return this;
  }

  /**
   * Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached
   * @return isReasonMarketWideCircuitBreakerLevel3
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonMarketWideCircuitBreakerLevel3() {
    return isReasonMarketWideCircuitBreakerLevel3;
  }

  public void setIsReasonMarketWideCircuitBreakerLevel3(@javax.annotation.Nullable Boolean isReasonMarketWideCircuitBreakerLevel3) {
    this.isReasonMarketWideCircuitBreakerLevel3 = isReasonMarketWideCircuitBreakerLevel3;
  }


  public AdminTradingStatusModel isReasonNotApplicable(@javax.annotation.Nullable Boolean isReasonNotApplicable) {
    this.isReasonNotApplicable = isReasonNotApplicable;
    return this;
  }

  /**
   * Gets whether the reason is Not Applicable
   * @return isReasonNotApplicable
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonNotApplicable() {
    return isReasonNotApplicable;
  }

  public void setIsReasonNotApplicable(@javax.annotation.Nullable Boolean isReasonNotApplicable) {
    this.isReasonNotApplicable = isReasonNotApplicable;
  }


  public AdminTradingStatusModel isReasonNotAvailable(@javax.annotation.Nullable Boolean isReasonNotAvailable) {
    this.isReasonNotAvailable = isReasonNotAvailable;
    return this;
  }

  /**
   * Gets whether the halt reason is Not Available
   * @return isReasonNotAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsReasonNotAvailable() {
    return isReasonNotAvailable;
  }

  public void setIsReasonNotAvailable(@javax.annotation.Nullable Boolean isReasonNotAvailable) {
    this.isReasonNotAvailable = isReasonNotAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminTradingStatusModel adminTradingStatusModel = (AdminTradingStatusModel) o;
    return Objects.equals(this.symbol, adminTradingStatusModel.symbol) &&
        Objects.equals(this.timestampNanos, adminTradingStatusModel.timestampNanos) &&
        Objects.equals(this.timestamp, adminTradingStatusModel.timestamp) &&
        Objects.equals(this.isTradingLive, adminTradingStatusModel.isTradingLive) &&
        Objects.equals(this.isTradingHalted, adminTradingStatusModel.isTradingHalted) &&
        Objects.equals(this.isTradingInOrderAcceptancePeriod, adminTradingStatusModel.isTradingInOrderAcceptancePeriod) &&
        Objects.equals(this.isTradingPaused, adminTradingStatusModel.isTradingPaused) &&
        Objects.equals(this.isReasonHaltNewsPending, adminTradingStatusModel.isReasonHaltNewsPending) &&
        Objects.equals(this.isReasonIpoNotYetTrading, adminTradingStatusModel.isReasonIpoNotYetTrading) &&
        Objects.equals(this.isReasonIpoDeferred, adminTradingStatusModel.isReasonIpoDeferred) &&
        Objects.equals(this.isReasonHaltNewsDissemination, adminTradingStatusModel.isReasonHaltNewsDissemination) &&
        Objects.equals(this.isReasonIpoOrderAcceptancePeriod, adminTradingStatusModel.isReasonIpoOrderAcceptancePeriod) &&
        Objects.equals(this.isReasonIpoPreLaunchPeriod, adminTradingStatusModel.isReasonIpoPreLaunchPeriod) &&
        Objects.equals(this.isReasonMarketWideCircuitBreakerLevel1, adminTradingStatusModel.isReasonMarketWideCircuitBreakerLevel1) &&
        Objects.equals(this.isReasonMarketWideCircuitBreakerLevel2, adminTradingStatusModel.isReasonMarketWideCircuitBreakerLevel2) &&
        Objects.equals(this.isReasonMarketWideCircuitBreakerLevel3, adminTradingStatusModel.isReasonMarketWideCircuitBreakerLevel3) &&
        Objects.equals(this.isReasonNotApplicable, adminTradingStatusModel.isReasonNotApplicable) &&
        Objects.equals(this.isReasonNotAvailable, adminTradingStatusModel.isReasonNotAvailable);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, timestampNanos, timestamp, isTradingLive, isTradingHalted, isTradingInOrderAcceptancePeriod, isTradingPaused, isReasonHaltNewsPending, isReasonIpoNotYetTrading, isReasonIpoDeferred, isReasonHaltNewsDissemination, isReasonIpoOrderAcceptancePeriod, isReasonIpoPreLaunchPeriod, isReasonMarketWideCircuitBreakerLevel1, isReasonMarketWideCircuitBreakerLevel2, isReasonMarketWideCircuitBreakerLevel3, isReasonNotApplicable, isReasonNotAvailable);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminTradingStatusModel {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    isTradingLive: ").append(toIndentedString(isTradingLive)).append("\n");
    sb.append("    isTradingHalted: ").append(toIndentedString(isTradingHalted)).append("\n");
    sb.append("    isTradingInOrderAcceptancePeriod: ").append(toIndentedString(isTradingInOrderAcceptancePeriod)).append("\n");
    sb.append("    isTradingPaused: ").append(toIndentedString(isTradingPaused)).append("\n");
    sb.append("    isReasonHaltNewsPending: ").append(toIndentedString(isReasonHaltNewsPending)).append("\n");
    sb.append("    isReasonIpoNotYetTrading: ").append(toIndentedString(isReasonIpoNotYetTrading)).append("\n");
    sb.append("    isReasonIpoDeferred: ").append(toIndentedString(isReasonIpoDeferred)).append("\n");
    sb.append("    isReasonHaltNewsDissemination: ").append(toIndentedString(isReasonHaltNewsDissemination)).append("\n");
    sb.append("    isReasonIpoOrderAcceptancePeriod: ").append(toIndentedString(isReasonIpoOrderAcceptancePeriod)).append("\n");
    sb.append("    isReasonIpoPreLaunchPeriod: ").append(toIndentedString(isReasonIpoPreLaunchPeriod)).append("\n");
    sb.append("    isReasonMarketWideCircuitBreakerLevel1: ").append(toIndentedString(isReasonMarketWideCircuitBreakerLevel1)).append("\n");
    sb.append("    isReasonMarketWideCircuitBreakerLevel2: ").append(toIndentedString(isReasonMarketWideCircuitBreakerLevel2)).append("\n");
    sb.append("    isReasonMarketWideCircuitBreakerLevel3: ").append(toIndentedString(isReasonMarketWideCircuitBreakerLevel3)).append("\n");
    sb.append("    isReasonNotApplicable: ").append(toIndentedString(isReasonNotApplicable)).append("\n");
    sb.append("    isReasonNotAvailable: ").append(toIndentedString(isReasonNotAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol", "timestamp_nanos", "timestamp", "is_trading_live", "is_trading_halted", "is_trading_in_order_acceptance_period", "is_trading_paused", "is_reason_halt_news_pending", "is_reason_ipo_not_yet_trading", "is_reason_ipo_deferred", "is_reason_halt_news_dissemination", "is_reason_ipo_order_acceptance_period", "is_reason_ipo_pre_launch_period", "is_reason_market_wide_circuit_breaker_level1", "is_reason_market_wide_circuit_breaker_level2", "is_reason_market_wide_circuit_breaker_level3", "is_reason_not_applicable", "is_reason_not_available"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminTradingStatusModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminTradingStatusModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in AdminTradingStatusModel is not found in the empty JSON string", AdminTradingStatusModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminTradingStatusModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `AdminTradingStatusModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminTradingStatusModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminTradingStatusModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminTradingStatusModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminTradingStatusModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminTradingStatusModel>() {
           @Override
           public void write(JsonWriter out, AdminTradingStatusModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminTradingStatusModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminTradingStatusModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminTradingStatusModel
   * @throws IOException if the JSON string is invalid with respect to AdminTradingStatusModel
   */
  public static AdminTradingStatusModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminTradingStatusModel.class);
  }

  /**
   * Convert an instance of AdminTradingStatusModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

