/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for retail liquidity indicator information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T06:10:31.348068192Z[Etc/UTC]", comments = "Generator version: 7.16.0")
public class AdminRetailLiquidityIndicatorModel {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR = "retail_liquidity_indicator";
  @SerializedName(SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR)
  @javax.annotation.Nullable
  private Integer retailLiquidityIndicator;

  public static final String SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR_CODE = "retail_liquidity_indicator_code";
  @SerializedName(SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR_CODE)
  @javax.annotation.Nullable
  private String retailLiquidityIndicatorCode;

  public static final String SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR_TEXT = "retail_liquidity_indicator_text";
  @SerializedName(SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR_TEXT)
  @javax.annotation.Nullable
  private String retailLiquidityIndicatorText;

  public static final String SERIALIZED_NAME_IS_RETAIL_INDICATOR_NOT_APPLICABLE = "is_retail_indicator_not_applicable";
  @SerializedName(SERIALIZED_NAME_IS_RETAIL_INDICATOR_NOT_APPLICABLE)
  @javax.annotation.Nullable
  private Boolean isRetailIndicatorNotApplicable;

  public static final String SERIALIZED_NAME_IS_RETAIL_INDICATOR_BUY_INTEREST = "is_retail_indicator_buy_interest";
  @SerializedName(SERIALIZED_NAME_IS_RETAIL_INDICATOR_BUY_INTEREST)
  @javax.annotation.Nullable
  private Boolean isRetailIndicatorBuyInterest;

  public static final String SERIALIZED_NAME_IS_RETAIL_INDICATOR_SELL_INTEREST = "is_retail_indicator_sell_interest";
  @SerializedName(SERIALIZED_NAME_IS_RETAIL_INDICATOR_SELL_INTEREST)
  @javax.annotation.Nullable
  private Boolean isRetailIndicatorSellInterest;

  public static final String SERIALIZED_NAME_IS_RETAIL_INDICATOR_BUY_AND_SELL_INTEREST = "is_retail_indicator_buy_and_sell_interest";
  @SerializedName(SERIALIZED_NAME_IS_RETAIL_INDICATOR_BUY_AND_SELL_INTEREST)
  @javax.annotation.Nullable
  private Boolean isRetailIndicatorBuyAndSellInterest;

  public AdminRetailLiquidityIndicatorModel() {
  }

  public AdminRetailLiquidityIndicatorModel symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The stock symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public AdminRetailLiquidityIndicatorModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public AdminRetailLiquidityIndicatorModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the retail liquidity indicator was recorded as DateTime
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AdminRetailLiquidityIndicatorModel retailLiquidityIndicator(@javax.annotation.Nullable Integer retailLiquidityIndicator) {
    this.retailLiquidityIndicator = retailLiquidityIndicator;
    return this;
  }

  /**
   * Retail liquidity indicator as byte value
   * @return retailLiquidityIndicator
   */
  @javax.annotation.Nullable
  public Integer getRetailLiquidityIndicator() {
    return retailLiquidityIndicator;
  }

  public void setRetailLiquidityIndicator(@javax.annotation.Nullable Integer retailLiquidityIndicator) {
    this.retailLiquidityIndicator = retailLiquidityIndicator;
  }


  public AdminRetailLiquidityIndicatorModel retailLiquidityIndicatorCode(@javax.annotation.Nullable String retailLiquidityIndicatorCode) {
    this.retailLiquidityIndicatorCode = retailLiquidityIndicatorCode;
    return this;
  }

  /**
   * Retail liquidity indicator as character string
   * @return retailLiquidityIndicatorCode
   */
  @javax.annotation.Nullable
  public String getRetailLiquidityIndicatorCode() {
    return retailLiquidityIndicatorCode;
  }

  public void setRetailLiquidityIndicatorCode(@javax.annotation.Nullable String retailLiquidityIndicatorCode) {
    this.retailLiquidityIndicatorCode = retailLiquidityIndicatorCode;
  }


  public AdminRetailLiquidityIndicatorModel retailLiquidityIndicatorText(@javax.annotation.Nullable String retailLiquidityIndicatorText) {
    this.retailLiquidityIndicatorText = retailLiquidityIndicatorText;
    return this;
  }

  /**
   * Human-readable description of the retail liquidity indicator
   * @return retailLiquidityIndicatorText
   */
  @javax.annotation.Nullable
  public String getRetailLiquidityIndicatorText() {
    return retailLiquidityIndicatorText;
  }

  public void setRetailLiquidityIndicatorText(@javax.annotation.Nullable String retailLiquidityIndicatorText) {
    this.retailLiquidityIndicatorText = retailLiquidityIndicatorText;
  }


  public AdminRetailLiquidityIndicatorModel isRetailIndicatorNotApplicable(@javax.annotation.Nullable Boolean isRetailIndicatorNotApplicable) {
    this.isRetailIndicatorNotApplicable = isRetailIndicatorNotApplicable;
    return this;
  }

  /**
   * Indicates if the indicator is &#39;Not Applicable&#39; (&#39; &#39;/0x20).
   * @return isRetailIndicatorNotApplicable
   */
  @javax.annotation.Nullable
  public Boolean getIsRetailIndicatorNotApplicable() {
    return isRetailIndicatorNotApplicable;
  }

  public void setIsRetailIndicatorNotApplicable(@javax.annotation.Nullable Boolean isRetailIndicatorNotApplicable) {
    this.isRetailIndicatorNotApplicable = isRetailIndicatorNotApplicable;
  }


  public AdminRetailLiquidityIndicatorModel isRetailIndicatorBuyInterest(@javax.annotation.Nullable Boolean isRetailIndicatorBuyInterest) {
    this.isRetailIndicatorBuyInterest = isRetailIndicatorBuyInterest;
    return this;
  }

  /**
   * Indicates if there is &#39;Buy interest for Retail&#39; (&#39;A&#39;/0x41).
   * @return isRetailIndicatorBuyInterest
   */
  @javax.annotation.Nullable
  public Boolean getIsRetailIndicatorBuyInterest() {
    return isRetailIndicatorBuyInterest;
  }

  public void setIsRetailIndicatorBuyInterest(@javax.annotation.Nullable Boolean isRetailIndicatorBuyInterest) {
    this.isRetailIndicatorBuyInterest = isRetailIndicatorBuyInterest;
  }


  public AdminRetailLiquidityIndicatorModel isRetailIndicatorSellInterest(@javax.annotation.Nullable Boolean isRetailIndicatorSellInterest) {
    this.isRetailIndicatorSellInterest = isRetailIndicatorSellInterest;
    return this;
  }

  /**
   * Indicates if there is &#39;Sell interest for Retail&#39; (&#39;B&#39;/0x42).
   * @return isRetailIndicatorSellInterest
   */
  @javax.annotation.Nullable
  public Boolean getIsRetailIndicatorSellInterest() {
    return isRetailIndicatorSellInterest;
  }

  public void setIsRetailIndicatorSellInterest(@javax.annotation.Nullable Boolean isRetailIndicatorSellInterest) {
    this.isRetailIndicatorSellInterest = isRetailIndicatorSellInterest;
  }


  public AdminRetailLiquidityIndicatorModel isRetailIndicatorBuyAndSellInterest(@javax.annotation.Nullable Boolean isRetailIndicatorBuyAndSellInterest) {
    this.isRetailIndicatorBuyAndSellInterest = isRetailIndicatorBuyAndSellInterest;
    return this;
  }

  /**
   * Indicates if there is &#39;Buy and sell interest for Retail&#39; (&#39;C&#39;/0x43).
   * @return isRetailIndicatorBuyAndSellInterest
   */
  @javax.annotation.Nullable
  public Boolean getIsRetailIndicatorBuyAndSellInterest() {
    return isRetailIndicatorBuyAndSellInterest;
  }

  public void setIsRetailIndicatorBuyAndSellInterest(@javax.annotation.Nullable Boolean isRetailIndicatorBuyAndSellInterest) {
    this.isRetailIndicatorBuyAndSellInterest = isRetailIndicatorBuyAndSellInterest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminRetailLiquidityIndicatorModel adminRetailLiquidityIndicatorModel = (AdminRetailLiquidityIndicatorModel) o;
    return Objects.equals(this.symbol, adminRetailLiquidityIndicatorModel.symbol) &&
        Objects.equals(this.timestampNanos, adminRetailLiquidityIndicatorModel.timestampNanos) &&
        Objects.equals(this.timestamp, adminRetailLiquidityIndicatorModel.timestamp) &&
        Objects.equals(this.retailLiquidityIndicator, adminRetailLiquidityIndicatorModel.retailLiquidityIndicator) &&
        Objects.equals(this.retailLiquidityIndicatorCode, adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorCode) &&
        Objects.equals(this.retailLiquidityIndicatorText, adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorText) &&
        Objects.equals(this.isRetailIndicatorNotApplicable, adminRetailLiquidityIndicatorModel.isRetailIndicatorNotApplicable) &&
        Objects.equals(this.isRetailIndicatorBuyInterest, adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyInterest) &&
        Objects.equals(this.isRetailIndicatorSellInterest, adminRetailLiquidityIndicatorModel.isRetailIndicatorSellInterest) &&
        Objects.equals(this.isRetailIndicatorBuyAndSellInterest, adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyAndSellInterest);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, timestampNanos, timestamp, retailLiquidityIndicator, retailLiquidityIndicatorCode, retailLiquidityIndicatorText, isRetailIndicatorNotApplicable, isRetailIndicatorBuyInterest, isRetailIndicatorSellInterest, isRetailIndicatorBuyAndSellInterest);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminRetailLiquidityIndicatorModel {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    retailLiquidityIndicator: ").append(toIndentedString(retailLiquidityIndicator)).append("\n");
    sb.append("    retailLiquidityIndicatorCode: ").append(toIndentedString(retailLiquidityIndicatorCode)).append("\n");
    sb.append("    retailLiquidityIndicatorText: ").append(toIndentedString(retailLiquidityIndicatorText)).append("\n");
    sb.append("    isRetailIndicatorNotApplicable: ").append(toIndentedString(isRetailIndicatorNotApplicable)).append("\n");
    sb.append("    isRetailIndicatorBuyInterest: ").append(toIndentedString(isRetailIndicatorBuyInterest)).append("\n");
    sb.append("    isRetailIndicatorSellInterest: ").append(toIndentedString(isRetailIndicatorSellInterest)).append("\n");
    sb.append("    isRetailIndicatorBuyAndSellInterest: ").append(toIndentedString(isRetailIndicatorBuyAndSellInterest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol", "timestamp_nanos", "timestamp", "retail_liquidity_indicator", "retail_liquidity_indicator_code", "retail_liquidity_indicator_text", "is_retail_indicator_not_applicable", "is_retail_indicator_buy_interest", "is_retail_indicator_sell_interest", "is_retail_indicator_buy_and_sell_interest"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminRetailLiquidityIndicatorModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminRetailLiquidityIndicatorModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in AdminRetailLiquidityIndicatorModel is not found in the empty JSON string", AdminRetailLiquidityIndicatorModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminRetailLiquidityIndicatorModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `AdminRetailLiquidityIndicatorModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("retail_liquidity_indicator_code") != null && !jsonObj.get("retail_liquidity_indicator_code").isJsonNull()) && !jsonObj.get("retail_liquidity_indicator_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `retail_liquidity_indicator_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retail_liquidity_indicator_code").toString()));
      }
      if ((jsonObj.get("retail_liquidity_indicator_text") != null && !jsonObj.get("retail_liquidity_indicator_text").isJsonNull()) && !jsonObj.get("retail_liquidity_indicator_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `retail_liquidity_indicator_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retail_liquidity_indicator_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminRetailLiquidityIndicatorModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminRetailLiquidityIndicatorModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminRetailLiquidityIndicatorModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminRetailLiquidityIndicatorModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminRetailLiquidityIndicatorModel>() {
           @Override
           public void write(JsonWriter out, AdminRetailLiquidityIndicatorModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminRetailLiquidityIndicatorModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminRetailLiquidityIndicatorModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminRetailLiquidityIndicatorModel
   * @throws IOException if the JSON string is invalid with respect to AdminRetailLiquidityIndicatorModel
   */
  public static AdminRetailLiquidityIndicatorModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminRetailLiquidityIndicatorModel.class);
  }

  /**
   * Convert an instance of AdminRetailLiquidityIndicatorModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

