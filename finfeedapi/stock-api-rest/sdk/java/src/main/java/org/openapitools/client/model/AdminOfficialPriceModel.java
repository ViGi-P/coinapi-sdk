/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for official price information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:07:59.075795092Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AdminOfficialPriceModel {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "price_type";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  @javax.annotation.Nullable
  private Integer priceType;

  public static final String SERIALIZED_NAME_PRICE_TYPE_CODE = "price_type_code";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE_CODE)
  @javax.annotation.Nullable
  private String priceTypeCode;

  public static final String SERIALIZED_NAME_PRICE_TYPE_TEXT = "price_type_text";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE_TEXT)
  @javax.annotation.Nullable
  private String priceTypeText;

  public static final String SERIALIZED_NAME_IS_PRICE_TYPE_OPENING = "is_price_type_opening";
  @SerializedName(SERIALIZED_NAME_IS_PRICE_TYPE_OPENING)
  @javax.annotation.Nullable
  private Boolean isPriceTypeOpening;

  public static final String SERIALIZED_NAME_IS_PRICE_TYPE_CLOSING = "is_price_type_closing";
  @SerializedName(SERIALIZED_NAME_IS_PRICE_TYPE_CLOSING)
  @javax.annotation.Nullable
  private Boolean isPriceTypeClosing;

  public static final String SERIALIZED_NAME_OFFICIAL_PRICE = "official_price";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_PRICE)
  @javax.annotation.Nullable
  private Double officialPrice;

  public AdminOfficialPriceModel() {
  }

  public AdminOfficialPriceModel symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The stock symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public AdminOfficialPriceModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public AdminOfficialPriceModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the official price was recorded as DateTime
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AdminOfficialPriceModel priceType(@javax.annotation.Nullable Integer priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * Type of price as byte value
   * @return priceType
   */
  @javax.annotation.Nullable
  public Integer getPriceType() {
    return priceType;
  }

  public void setPriceType(@javax.annotation.Nullable Integer priceType) {
    this.priceType = priceType;
  }


  public AdminOfficialPriceModel priceTypeCode(@javax.annotation.Nullable String priceTypeCode) {
    this.priceTypeCode = priceTypeCode;
    return this;
  }

  /**
   * Type of price as character string
   * @return priceTypeCode
   */
  @javax.annotation.Nullable
  public String getPriceTypeCode() {
    return priceTypeCode;
  }

  public void setPriceTypeCode(@javax.annotation.Nullable String priceTypeCode) {
    this.priceTypeCode = priceTypeCode;
  }


  public AdminOfficialPriceModel priceTypeText(@javax.annotation.Nullable String priceTypeText) {
    this.priceTypeText = priceTypeText;
    return this;
  }

  /**
   * Human-readable description of the price type
   * @return priceTypeText
   */
  @javax.annotation.Nullable
  public String getPriceTypeText() {
    return priceTypeText;
  }

  public void setPriceTypeText(@javax.annotation.Nullable String priceTypeText) {
    this.priceTypeText = priceTypeText;
  }


  public AdminOfficialPriceModel isPriceTypeOpening(@javax.annotation.Nullable Boolean isPriceTypeOpening) {
    this.isPriceTypeOpening = isPriceTypeOpening;
    return this;
  }

  /**
   * Indicates if the price type is &#39;IEX Official Opening Price&#39; (&#39;Q&#39;/0x51).
   * @return isPriceTypeOpening
   */
  @javax.annotation.Nullable
  public Boolean getIsPriceTypeOpening() {
    return isPriceTypeOpening;
  }

  public void setIsPriceTypeOpening(@javax.annotation.Nullable Boolean isPriceTypeOpening) {
    this.isPriceTypeOpening = isPriceTypeOpening;
  }


  public AdminOfficialPriceModel isPriceTypeClosing(@javax.annotation.Nullable Boolean isPriceTypeClosing) {
    this.isPriceTypeClosing = isPriceTypeClosing;
    return this;
  }

  /**
   * Indicates if the price type is &#39;IEX Official Closing Price&#39; (&#39;M&#39;/0x4d).
   * @return isPriceTypeClosing
   */
  @javax.annotation.Nullable
  public Boolean getIsPriceTypeClosing() {
    return isPriceTypeClosing;
  }

  public void setIsPriceTypeClosing(@javax.annotation.Nullable Boolean isPriceTypeClosing) {
    this.isPriceTypeClosing = isPriceTypeClosing;
  }


  public AdminOfficialPriceModel officialPrice(@javax.annotation.Nullable Double officialPrice) {
    this.officialPrice = officialPrice;
    return this;
  }

  /**
   * Official price as decimal
   * @return officialPrice
   */
  @javax.annotation.Nullable
  public Double getOfficialPrice() {
    return officialPrice;
  }

  public void setOfficialPrice(@javax.annotation.Nullable Double officialPrice) {
    this.officialPrice = officialPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminOfficialPriceModel adminOfficialPriceModel = (AdminOfficialPriceModel) o;
    return Objects.equals(this.symbol, adminOfficialPriceModel.symbol) &&
        Objects.equals(this.timestampNanos, adminOfficialPriceModel.timestampNanos) &&
        Objects.equals(this.timestamp, adminOfficialPriceModel.timestamp) &&
        Objects.equals(this.priceType, adminOfficialPriceModel.priceType) &&
        Objects.equals(this.priceTypeCode, adminOfficialPriceModel.priceTypeCode) &&
        Objects.equals(this.priceTypeText, adminOfficialPriceModel.priceTypeText) &&
        Objects.equals(this.isPriceTypeOpening, adminOfficialPriceModel.isPriceTypeOpening) &&
        Objects.equals(this.isPriceTypeClosing, adminOfficialPriceModel.isPriceTypeClosing) &&
        Objects.equals(this.officialPrice, adminOfficialPriceModel.officialPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, timestampNanos, timestamp, priceType, priceTypeCode, priceTypeText, isPriceTypeOpening, isPriceTypeClosing, officialPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminOfficialPriceModel {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    priceTypeCode: ").append(toIndentedString(priceTypeCode)).append("\n");
    sb.append("    priceTypeText: ").append(toIndentedString(priceTypeText)).append("\n");
    sb.append("    isPriceTypeOpening: ").append(toIndentedString(isPriceTypeOpening)).append("\n");
    sb.append("    isPriceTypeClosing: ").append(toIndentedString(isPriceTypeClosing)).append("\n");
    sb.append("    officialPrice: ").append(toIndentedString(officialPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol", "timestamp_nanos", "timestamp", "price_type", "price_type_code", "price_type_text", "is_price_type_opening", "is_price_type_closing", "official_price"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminOfficialPriceModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminOfficialPriceModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminOfficialPriceModel is not found in the empty JSON string", AdminOfficialPriceModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminOfficialPriceModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminOfficialPriceModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("price_type_code") != null && !jsonObj.get("price_type_code").isJsonNull()) && !jsonObj.get("price_type_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_type_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_type_code").toString()));
      }
      if ((jsonObj.get("price_type_text") != null && !jsonObj.get("price_type_text").isJsonNull()) && !jsonObj.get("price_type_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_type_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_type_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminOfficialPriceModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminOfficialPriceModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminOfficialPriceModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminOfficialPriceModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminOfficialPriceModel>() {
           @Override
           public void write(JsonWriter out, AdminOfficialPriceModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminOfficialPriceModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminOfficialPriceModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminOfficialPriceModel
   * @throws IOException if the JSON string is invalid with respect to AdminOfficialPriceModel
   */
  public static AdminOfficialPriceModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminOfficialPriceModel.class);
  }

  /**
   * Convert an instance of AdminOfficialPriceModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

