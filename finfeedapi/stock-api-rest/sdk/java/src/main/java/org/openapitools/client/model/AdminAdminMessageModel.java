/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminAuctionInformationModel;
import org.openapitools.client.model.AdminOfficialPriceModel;
import org.openapitools.client.model.AdminOperationalHaltStatusModel;
import org.openapitools.client.model.AdminRetailLiquidityIndicatorModel;
import org.openapitools.client.model.AdminSecurityDirectoryModel;
import org.openapitools.client.model.AdminSecurityEventModel;
import org.openapitools.client.model.AdminShortSalePriceTestStatusModel;
import org.openapitools.client.model.AdminSystemEventModel;
import org.openapitools.client.model.AdminTradingStatusModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for IEX admin information, combining all symbol-based admin message types
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:07:59.075795092Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AdminAdminMessageModel {
  public static final String SERIALIZED_NAME_TRADING_STATUS = "trading_status";
  @SerializedName(SERIALIZED_NAME_TRADING_STATUS)
  @javax.annotation.Nullable
  private AdminTradingStatusModel tradingStatus;

  public static final String SERIALIZED_NAME_OFFICIAL_PRICE = "official_price";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_PRICE)
  @javax.annotation.Nullable
  private AdminOfficialPriceModel officialPrice;

  public static final String SERIALIZED_NAME_SECURITY_EVENT = "security_event";
  @SerializedName(SERIALIZED_NAME_SECURITY_EVENT)
  @javax.annotation.Nullable
  private AdminSecurityEventModel securityEvent;

  public static final String SERIALIZED_NAME_AUCTION_INFORMATION = "auction_information";
  @SerializedName(SERIALIZED_NAME_AUCTION_INFORMATION)
  @javax.annotation.Nullable
  private AdminAuctionInformationModel auctionInformation;

  public static final String SERIALIZED_NAME_SHORT_SALE_PRICE_TEST = "short_sale_price_test";
  @SerializedName(SERIALIZED_NAME_SHORT_SALE_PRICE_TEST)
  @javax.annotation.Nullable
  private AdminShortSalePriceTestStatusModel shortSalePriceTest;

  public static final String SERIALIZED_NAME_OPERATIONAL_HALT_STATUS = "operational_halt_status";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_HALT_STATUS)
  @javax.annotation.Nullable
  private AdminOperationalHaltStatusModel operationalHaltStatus;

  public static final String SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR = "retail_liquidity_indicator";
  @SerializedName(SERIALIZED_NAME_RETAIL_LIQUIDITY_INDICATOR)
  @javax.annotation.Nullable
  private AdminRetailLiquidityIndicatorModel retailLiquidityIndicator;

  public static final String SERIALIZED_NAME_SYSTEM_EVENT = "system_event";
  @SerializedName(SERIALIZED_NAME_SYSTEM_EVENT)
  @javax.annotation.Nullable
  private AdminSystemEventModel systemEvent;

  public static final String SERIALIZED_NAME_SECURITY_DIRECTORY = "security_directory";
  @SerializedName(SERIALIZED_NAME_SECURITY_DIRECTORY)
  @javax.annotation.Nullable
  private AdminSecurityDirectoryModel securityDirectory;

  public AdminAdminMessageModel() {
  }

  public AdminAdminMessageModel tradingStatus(@javax.annotation.Nullable AdminTradingStatusModel tradingStatus) {
    this.tradingStatus = tradingStatus;
    return this;
  }

  /**
   * Get tradingStatus
   * @return tradingStatus
   */
  @javax.annotation.Nullable
  public AdminTradingStatusModel getTradingStatus() {
    return tradingStatus;
  }

  public void setTradingStatus(@javax.annotation.Nullable AdminTradingStatusModel tradingStatus) {
    this.tradingStatus = tradingStatus;
  }


  public AdminAdminMessageModel officialPrice(@javax.annotation.Nullable AdminOfficialPriceModel officialPrice) {
    this.officialPrice = officialPrice;
    return this;
  }

  /**
   * Get officialPrice
   * @return officialPrice
   */
  @javax.annotation.Nullable
  public AdminOfficialPriceModel getOfficialPrice() {
    return officialPrice;
  }

  public void setOfficialPrice(@javax.annotation.Nullable AdminOfficialPriceModel officialPrice) {
    this.officialPrice = officialPrice;
  }


  public AdminAdminMessageModel securityEvent(@javax.annotation.Nullable AdminSecurityEventModel securityEvent) {
    this.securityEvent = securityEvent;
    return this;
  }

  /**
   * Get securityEvent
   * @return securityEvent
   */
  @javax.annotation.Nullable
  public AdminSecurityEventModel getSecurityEvent() {
    return securityEvent;
  }

  public void setSecurityEvent(@javax.annotation.Nullable AdminSecurityEventModel securityEvent) {
    this.securityEvent = securityEvent;
  }


  public AdminAdminMessageModel auctionInformation(@javax.annotation.Nullable AdminAuctionInformationModel auctionInformation) {
    this.auctionInformation = auctionInformation;
    return this;
  }

  /**
   * Get auctionInformation
   * @return auctionInformation
   */
  @javax.annotation.Nullable
  public AdminAuctionInformationModel getAuctionInformation() {
    return auctionInformation;
  }

  public void setAuctionInformation(@javax.annotation.Nullable AdminAuctionInformationModel auctionInformation) {
    this.auctionInformation = auctionInformation;
  }


  public AdminAdminMessageModel shortSalePriceTest(@javax.annotation.Nullable AdminShortSalePriceTestStatusModel shortSalePriceTest) {
    this.shortSalePriceTest = shortSalePriceTest;
    return this;
  }

  /**
   * Get shortSalePriceTest
   * @return shortSalePriceTest
   */
  @javax.annotation.Nullable
  public AdminShortSalePriceTestStatusModel getShortSalePriceTest() {
    return shortSalePriceTest;
  }

  public void setShortSalePriceTest(@javax.annotation.Nullable AdminShortSalePriceTestStatusModel shortSalePriceTest) {
    this.shortSalePriceTest = shortSalePriceTest;
  }


  public AdminAdminMessageModel operationalHaltStatus(@javax.annotation.Nullable AdminOperationalHaltStatusModel operationalHaltStatus) {
    this.operationalHaltStatus = operationalHaltStatus;
    return this;
  }

  /**
   * Get operationalHaltStatus
   * @return operationalHaltStatus
   */
  @javax.annotation.Nullable
  public AdminOperationalHaltStatusModel getOperationalHaltStatus() {
    return operationalHaltStatus;
  }

  public void setOperationalHaltStatus(@javax.annotation.Nullable AdminOperationalHaltStatusModel operationalHaltStatus) {
    this.operationalHaltStatus = operationalHaltStatus;
  }


  public AdminAdminMessageModel retailLiquidityIndicator(@javax.annotation.Nullable AdminRetailLiquidityIndicatorModel retailLiquidityIndicator) {
    this.retailLiquidityIndicator = retailLiquidityIndicator;
    return this;
  }

  /**
   * Get retailLiquidityIndicator
   * @return retailLiquidityIndicator
   */
  @javax.annotation.Nullable
  public AdminRetailLiquidityIndicatorModel getRetailLiquidityIndicator() {
    return retailLiquidityIndicator;
  }

  public void setRetailLiquidityIndicator(@javax.annotation.Nullable AdminRetailLiquidityIndicatorModel retailLiquidityIndicator) {
    this.retailLiquidityIndicator = retailLiquidityIndicator;
  }


  public AdminAdminMessageModel systemEvent(@javax.annotation.Nullable AdminSystemEventModel systemEvent) {
    this.systemEvent = systemEvent;
    return this;
  }

  /**
   * Get systemEvent
   * @return systemEvent
   */
  @javax.annotation.Nullable
  public AdminSystemEventModel getSystemEvent() {
    return systemEvent;
  }

  public void setSystemEvent(@javax.annotation.Nullable AdminSystemEventModel systemEvent) {
    this.systemEvent = systemEvent;
  }


  public AdminAdminMessageModel securityDirectory(@javax.annotation.Nullable AdminSecurityDirectoryModel securityDirectory) {
    this.securityDirectory = securityDirectory;
    return this;
  }

  /**
   * Get securityDirectory
   * @return securityDirectory
   */
  @javax.annotation.Nullable
  public AdminSecurityDirectoryModel getSecurityDirectory() {
    return securityDirectory;
  }

  public void setSecurityDirectory(@javax.annotation.Nullable AdminSecurityDirectoryModel securityDirectory) {
    this.securityDirectory = securityDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminAdminMessageModel adminAdminMessageModel = (AdminAdminMessageModel) o;
    return Objects.equals(this.tradingStatus, adminAdminMessageModel.tradingStatus) &&
        Objects.equals(this.officialPrice, adminAdminMessageModel.officialPrice) &&
        Objects.equals(this.securityEvent, adminAdminMessageModel.securityEvent) &&
        Objects.equals(this.auctionInformation, adminAdminMessageModel.auctionInformation) &&
        Objects.equals(this.shortSalePriceTest, adminAdminMessageModel.shortSalePriceTest) &&
        Objects.equals(this.operationalHaltStatus, adminAdminMessageModel.operationalHaltStatus) &&
        Objects.equals(this.retailLiquidityIndicator, adminAdminMessageModel.retailLiquidityIndicator) &&
        Objects.equals(this.systemEvent, adminAdminMessageModel.systemEvent) &&
        Objects.equals(this.securityDirectory, adminAdminMessageModel.securityDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tradingStatus, officialPrice, securityEvent, auctionInformation, shortSalePriceTest, operationalHaltStatus, retailLiquidityIndicator, systemEvent, securityDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminAdminMessageModel {\n");
    sb.append("    tradingStatus: ").append(toIndentedString(tradingStatus)).append("\n");
    sb.append("    officialPrice: ").append(toIndentedString(officialPrice)).append("\n");
    sb.append("    securityEvent: ").append(toIndentedString(securityEvent)).append("\n");
    sb.append("    auctionInformation: ").append(toIndentedString(auctionInformation)).append("\n");
    sb.append("    shortSalePriceTest: ").append(toIndentedString(shortSalePriceTest)).append("\n");
    sb.append("    operationalHaltStatus: ").append(toIndentedString(operationalHaltStatus)).append("\n");
    sb.append("    retailLiquidityIndicator: ").append(toIndentedString(retailLiquidityIndicator)).append("\n");
    sb.append("    systemEvent: ").append(toIndentedString(systemEvent)).append("\n");
    sb.append("    securityDirectory: ").append(toIndentedString(securityDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("trading_status", "official_price", "security_event", "auction_information", "short_sale_price_test", "operational_halt_status", "retail_liquidity_indicator", "system_event", "security_directory"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminAdminMessageModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminAdminMessageModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminAdminMessageModel is not found in the empty JSON string", AdminAdminMessageModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminAdminMessageModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminAdminMessageModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `trading_status`
      if (jsonObj.get("trading_status") != null && !jsonObj.get("trading_status").isJsonNull()) {
        AdminTradingStatusModel.validateJsonElement(jsonObj.get("trading_status"));
      }
      // validate the optional field `official_price`
      if (jsonObj.get("official_price") != null && !jsonObj.get("official_price").isJsonNull()) {
        AdminOfficialPriceModel.validateJsonElement(jsonObj.get("official_price"));
      }
      // validate the optional field `security_event`
      if (jsonObj.get("security_event") != null && !jsonObj.get("security_event").isJsonNull()) {
        AdminSecurityEventModel.validateJsonElement(jsonObj.get("security_event"));
      }
      // validate the optional field `auction_information`
      if (jsonObj.get("auction_information") != null && !jsonObj.get("auction_information").isJsonNull()) {
        AdminAuctionInformationModel.validateJsonElement(jsonObj.get("auction_information"));
      }
      // validate the optional field `short_sale_price_test`
      if (jsonObj.get("short_sale_price_test") != null && !jsonObj.get("short_sale_price_test").isJsonNull()) {
        AdminShortSalePriceTestStatusModel.validateJsonElement(jsonObj.get("short_sale_price_test"));
      }
      // validate the optional field `operational_halt_status`
      if (jsonObj.get("operational_halt_status") != null && !jsonObj.get("operational_halt_status").isJsonNull()) {
        AdminOperationalHaltStatusModel.validateJsonElement(jsonObj.get("operational_halt_status"));
      }
      // validate the optional field `retail_liquidity_indicator`
      if (jsonObj.get("retail_liquidity_indicator") != null && !jsonObj.get("retail_liquidity_indicator").isJsonNull()) {
        AdminRetailLiquidityIndicatorModel.validateJsonElement(jsonObj.get("retail_liquidity_indicator"));
      }
      // validate the optional field `system_event`
      if (jsonObj.get("system_event") != null && !jsonObj.get("system_event").isJsonNull()) {
        AdminSystemEventModel.validateJsonElement(jsonObj.get("system_event"));
      }
      // validate the optional field `security_directory`
      if (jsonObj.get("security_directory") != null && !jsonObj.get("security_directory").isJsonNull()) {
        AdminSecurityDirectoryModel.validateJsonElement(jsonObj.get("security_directory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminAdminMessageModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminAdminMessageModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminAdminMessageModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminAdminMessageModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminAdminMessageModel>() {
           @Override
           public void write(JsonWriter out, AdminAdminMessageModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminAdminMessageModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminAdminMessageModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminAdminMessageModel
   * @throws IOException if the JSON string is invalid with respect to AdminAdminMessageModel
   */
  public static AdminAdminMessageModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminAdminMessageModel.class);
  }

  /**
   * Convert an instance of AdminAdminMessageModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

