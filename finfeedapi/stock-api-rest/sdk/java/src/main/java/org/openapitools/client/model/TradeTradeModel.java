/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for a single trade event (report or break).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:07:59.075795092Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class TradeTradeModel {
  public static final String SERIALIZED_NAME_IS_TRADE_BREAK = "is_trade_break";
  @SerializedName(SERIALIZED_NAME_IS_TRADE_BREAK)
  @javax.annotation.Nullable
  private Boolean isTradeBreak;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private Integer size;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private Double price;

  public static final String SERIALIZED_NAME_TRADE_ID = "trade_id";
  @SerializedName(SERIALIZED_NAME_TRADE_ID)
  @javax.annotation.Nullable
  private Long tradeId;

  public static final String SERIALIZED_NAME_IS_INTERMARKET_SWEEP = "is_intermarket_sweep";
  @SerializedName(SERIALIZED_NAME_IS_INTERMARKET_SWEEP)
  @javax.annotation.Nullable
  private Boolean isIntermarketSweep;

  public static final String SERIALIZED_NAME_IS_EXTENDED_HOURS_TRADE = "is_extended_hours_trade";
  @SerializedName(SERIALIZED_NAME_IS_EXTENDED_HOURS_TRADE)
  @javax.annotation.Nullable
  private Boolean isExtendedHoursTrade;

  public static final String SERIALIZED_NAME_IS_ODD_LOT_TRADE = "is_odd_lot_trade";
  @SerializedName(SERIALIZED_NAME_IS_ODD_LOT_TRADE)
  @javax.annotation.Nullable
  private Boolean isOddLotTrade;

  public static final String SERIALIZED_NAME_IS_TRADE_THROUGH_EXEMPT = "is_trade_through_exempt";
  @SerializedName(SERIALIZED_NAME_IS_TRADE_THROUGH_EXEMPT)
  @javax.annotation.Nullable
  private Boolean isTradeThroughExempt;

  public static final String SERIALIZED_NAME_IS_SINGLE_PRICE_CROSS_TRADE = "is_single_price_cross_trade";
  @SerializedName(SERIALIZED_NAME_IS_SINGLE_PRICE_CROSS_TRADE)
  @javax.annotation.Nullable
  private Boolean isSinglePriceCrossTrade;

  public TradeTradeModel() {
  }

  public TradeTradeModel isTradeBreak(@javax.annotation.Nullable Boolean isTradeBreak) {
    this.isTradeBreak = isTradeBreak;
    return this;
  }

  /**
   * Indicates if this record represents a trade break (true) or a trade report (false).
   * @return isTradeBreak
   */
  @javax.annotation.Nullable
  public Boolean getIsTradeBreak() {
    return isTradeBreak;
  }

  public void setIsTradeBreak(@javax.annotation.Nullable Boolean isTradeBreak) {
    this.isTradeBreak = isTradeBreak;
  }


  public TradeTradeModel symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The stock symbol.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public TradeTradeModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch.
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public TradeTradeModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the event was recorded as DateTime (UTC).
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TradeTradeModel size(@javax.annotation.Nullable Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Trade volume (or break volume) in number of shares.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable Integer size) {
    this.size = size;
  }


  public TradeTradeModel price(@javax.annotation.Nullable Double price) {
    this.price = price;
    return this;
  }

  /**
   * Trade price (or break price) as decimal.
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable Double price) {
    this.price = price;
  }


  public TradeTradeModel tradeId(@javax.annotation.Nullable Long tradeId) {
    this.tradeId = tradeId;
    return this;
  }

  /**
   * IEX trade identifier (same for report and its corresponding break).
   * @return tradeId
   */
  @javax.annotation.Nullable
  public Long getTradeId() {
    return tradeId;
  }

  public void setTradeId(@javax.annotation.Nullable Long tradeId) {
    this.tradeId = tradeId;
  }


  public TradeTradeModel isIntermarketSweep(@javax.annotation.Nullable Boolean isIntermarketSweep) {
    this.isIntermarketSweep = isIntermarketSweep;
    return this;
  }

  /**
   * Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (\&quot;ISO\&quot;). False: Non-Intermarket Sweep Order.
   * @return isIntermarketSweep
   */
  @javax.annotation.Nullable
  public Boolean getIsIntermarketSweep() {
    return isIntermarketSweep;
  }

  public void setIsIntermarketSweep(@javax.annotation.Nullable Boolean isIntermarketSweep) {
    this.isIntermarketSweep = isIntermarketSweep;
  }


  public TradeTradeModel isExtendedHoursTrade(@javax.annotation.Nullable Boolean isExtendedHoursTrade) {
    this.isExtendedHoursTrade = isExtendedHoursTrade;
    return this;
  }

  /**
   * Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade.
   * @return isExtendedHoursTrade
   */
  @javax.annotation.Nullable
  public Boolean getIsExtendedHoursTrade() {
    return isExtendedHoursTrade;
  }

  public void setIsExtendedHoursTrade(@javax.annotation.Nullable Boolean isExtendedHoursTrade) {
    this.isExtendedHoursTrade = isExtendedHoursTrade;
  }


  public TradeTradeModel isOddLotTrade(@javax.annotation.Nullable Boolean isOddLotTrade) {
    this.isOddLotTrade = isOddLotTrade;
    return this;
  }

  /**
   * Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade.
   * @return isOddLotTrade
   */
  @javax.annotation.Nullable
  public Boolean getIsOddLotTrade() {
    return isOddLotTrade;
  }

  public void setIsOddLotTrade(@javax.annotation.Nullable Boolean isOddLotTrade) {
    this.isOddLotTrade = isOddLotTrade;
  }


  public TradeTradeModel isTradeThroughExempt(@javax.annotation.Nullable Boolean isTradeThroughExempt) {
    this.isTradeThroughExempt = isTradeThroughExempt;
    return this;
  }

  /**
   * Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue&#39;s quotation, OR the trade was a single-price cross.
   * @return isTradeThroughExempt
   */
  @javax.annotation.Nullable
  public Boolean getIsTradeThroughExempt() {
    return isTradeThroughExempt;
  }

  public void setIsTradeThroughExempt(@javax.annotation.Nullable Boolean isTradeThroughExempt) {
    this.isTradeThroughExempt = isTradeThroughExempt;
  }


  public TradeTradeModel isSinglePriceCrossTrade(@javax.annotation.Nullable Boolean isSinglePriceCrossTrade) {
    this.isSinglePriceCrossTrade = isSinglePriceCrossTrade;
    return this;
  }

  /**
   * Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading.
   * @return isSinglePriceCrossTrade
   */
  @javax.annotation.Nullable
  public Boolean getIsSinglePriceCrossTrade() {
    return isSinglePriceCrossTrade;
  }

  public void setIsSinglePriceCrossTrade(@javax.annotation.Nullable Boolean isSinglePriceCrossTrade) {
    this.isSinglePriceCrossTrade = isSinglePriceCrossTrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradeTradeModel tradeTradeModel = (TradeTradeModel) o;
    return Objects.equals(this.isTradeBreak, tradeTradeModel.isTradeBreak) &&
        Objects.equals(this.symbol, tradeTradeModel.symbol) &&
        Objects.equals(this.timestampNanos, tradeTradeModel.timestampNanos) &&
        Objects.equals(this.timestamp, tradeTradeModel.timestamp) &&
        Objects.equals(this.size, tradeTradeModel.size) &&
        Objects.equals(this.price, tradeTradeModel.price) &&
        Objects.equals(this.tradeId, tradeTradeModel.tradeId) &&
        Objects.equals(this.isIntermarketSweep, tradeTradeModel.isIntermarketSweep) &&
        Objects.equals(this.isExtendedHoursTrade, tradeTradeModel.isExtendedHoursTrade) &&
        Objects.equals(this.isOddLotTrade, tradeTradeModel.isOddLotTrade) &&
        Objects.equals(this.isTradeThroughExempt, tradeTradeModel.isTradeThroughExempt) &&
        Objects.equals(this.isSinglePriceCrossTrade, tradeTradeModel.isSinglePriceCrossTrade);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isTradeBreak, symbol, timestampNanos, timestamp, size, price, tradeId, isIntermarketSweep, isExtendedHoursTrade, isOddLotTrade, isTradeThroughExempt, isSinglePriceCrossTrade);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradeTradeModel {\n");
    sb.append("    isTradeBreak: ").append(toIndentedString(isTradeBreak)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    tradeId: ").append(toIndentedString(tradeId)).append("\n");
    sb.append("    isIntermarketSweep: ").append(toIndentedString(isIntermarketSweep)).append("\n");
    sb.append("    isExtendedHoursTrade: ").append(toIndentedString(isExtendedHoursTrade)).append("\n");
    sb.append("    isOddLotTrade: ").append(toIndentedString(isOddLotTrade)).append("\n");
    sb.append("    isTradeThroughExempt: ").append(toIndentedString(isTradeThroughExempt)).append("\n");
    sb.append("    isSinglePriceCrossTrade: ").append(toIndentedString(isSinglePriceCrossTrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("is_trade_break", "symbol", "timestamp_nanos", "timestamp", "size", "price", "trade_id", "is_intermarket_sweep", "is_extended_hours_trade", "is_odd_lot_trade", "is_trade_through_exempt", "is_single_price_cross_trade"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradeTradeModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradeTradeModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradeTradeModel is not found in the empty JSON string", TradeTradeModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradeTradeModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradeTradeModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradeTradeModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradeTradeModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradeTradeModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradeTradeModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TradeTradeModel>() {
           @Override
           public void write(JsonWriter out, TradeTradeModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradeTradeModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradeTradeModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradeTradeModel
   * @throws IOException if the JSON string is invalid with respect to TradeTradeModel
   */
  public static TradeTradeModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradeTradeModel.class);
  }

  /**
   * Convert an instance of TradeTradeModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

