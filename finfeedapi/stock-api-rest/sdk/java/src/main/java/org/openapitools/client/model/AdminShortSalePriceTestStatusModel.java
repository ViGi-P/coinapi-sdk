/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response DTO for short sale price test status information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T06:07:59.075795092Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AdminShortSalePriceTestStatusModel {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TIMESTAMP_NANOS = "timestamp_nanos";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_NANOS)
  @javax.annotation.Nullable
  private Long timestampNanos;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS = "short_sale_price_test_status";
  @SerializedName(SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS)
  @javax.annotation.Nullable
  private Integer shortSalePriceTestStatus;

  public static final String SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS_CODE = "short_sale_price_test_status_code";
  @SerializedName(SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS_CODE)
  @javax.annotation.Nullable
  private String shortSalePriceTestStatusCode;

  public static final String SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS_TEXT = "short_sale_price_test_status_text";
  @SerializedName(SERIALIZED_NAME_SHORT_SALE_PRICE_TEST_STATUS_TEXT)
  @javax.annotation.Nullable
  private String shortSalePriceTestStatusText;

  public static final String SERIALIZED_NAME_IS_SHORT_SALE_PRICE_TEST_NOT_IN_EFFECT = "is_short_sale_price_test_not_in_effect";
  @SerializedName(SERIALIZED_NAME_IS_SHORT_SALE_PRICE_TEST_NOT_IN_EFFECT)
  @javax.annotation.Nullable
  private Boolean isShortSalePriceTestNotInEffect;

  public static final String SERIALIZED_NAME_IS_SHORT_SALE_PRICE_TEST_IN_EFFECT = "is_short_sale_price_test_in_effect";
  @SerializedName(SERIALIZED_NAME_IS_SHORT_SALE_PRICE_TEST_IN_EFFECT)
  @javax.annotation.Nullable
  private Boolean isShortSalePriceTestInEffect;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  @javax.annotation.Nullable
  private Integer detail;

  public static final String SERIALIZED_NAME_DETAIL_CODE = "detail_code";
  @SerializedName(SERIALIZED_NAME_DETAIL_CODE)
  @javax.annotation.Nullable
  private String detailCode;

  public static final String SERIALIZED_NAME_DETAIL_TEXT = "detail_text";
  @SerializedName(SERIALIZED_NAME_DETAIL_TEXT)
  @javax.annotation.Nullable
  private String detailText;

  public static final String SERIALIZED_NAME_IS_DETAIL_NO_PRICE_TEST = "is_detail_no_price_test";
  @SerializedName(SERIALIZED_NAME_IS_DETAIL_NO_PRICE_TEST)
  @javax.annotation.Nullable
  private Boolean isDetailNoPriceTest;

  public static final String SERIALIZED_NAME_IS_DETAIL_ACTIVATED = "is_detail_activated";
  @SerializedName(SERIALIZED_NAME_IS_DETAIL_ACTIVATED)
  @javax.annotation.Nullable
  private Boolean isDetailActivated;

  public static final String SERIALIZED_NAME_IS_DETAIL_CONTINUED = "is_detail_continued";
  @SerializedName(SERIALIZED_NAME_IS_DETAIL_CONTINUED)
  @javax.annotation.Nullable
  private Boolean isDetailContinued;

  public static final String SERIALIZED_NAME_IS_DETAIL_DEACTIVATED = "is_detail_deactivated";
  @SerializedName(SERIALIZED_NAME_IS_DETAIL_DEACTIVATED)
  @javax.annotation.Nullable
  private Boolean isDetailDeactivated;

  public static final String SERIALIZED_NAME_IS_DETAIL_NOT_AVAILABLE = "is_detail_not_available";
  @SerializedName(SERIALIZED_NAME_IS_DETAIL_NOT_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean isDetailNotAvailable;

  public AdminShortSalePriceTestStatusModel() {
  }

  public AdminShortSalePriceTestStatusModel symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The stock symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public AdminShortSalePriceTestStatusModel timestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
    return this;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   * @return timestampNanos
   */
  @javax.annotation.Nullable
  public Long getTimestampNanos() {
    return timestampNanos;
  }

  public void setTimestampNanos(@javax.annotation.Nullable Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }


  public AdminShortSalePriceTestStatusModel timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Time when the short sale price test status was recorded as DateTime
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AdminShortSalePriceTestStatusModel shortSalePriceTestStatus(@javax.annotation.Nullable Integer shortSalePriceTestStatus) {
    this.shortSalePriceTestStatus = shortSalePriceTestStatus;
    return this;
  }

  /**
   * Short sale price test status as byte value
   * @return shortSalePriceTestStatus
   */
  @javax.annotation.Nullable
  public Integer getShortSalePriceTestStatus() {
    return shortSalePriceTestStatus;
  }

  public void setShortSalePriceTestStatus(@javax.annotation.Nullable Integer shortSalePriceTestStatus) {
    this.shortSalePriceTestStatus = shortSalePriceTestStatus;
  }


  public AdminShortSalePriceTestStatusModel shortSalePriceTestStatusCode(@javax.annotation.Nullable String shortSalePriceTestStatusCode) {
    this.shortSalePriceTestStatusCode = shortSalePriceTestStatusCode;
    return this;
  }

  /**
   * Short sale price test status as hex string
   * @return shortSalePriceTestStatusCode
   */
  @javax.annotation.Nullable
  public String getShortSalePriceTestStatusCode() {
    return shortSalePriceTestStatusCode;
  }

  public void setShortSalePriceTestStatusCode(@javax.annotation.Nullable String shortSalePriceTestStatusCode) {
    this.shortSalePriceTestStatusCode = shortSalePriceTestStatusCode;
  }


  public AdminShortSalePriceTestStatusModel shortSalePriceTestStatusText(@javax.annotation.Nullable String shortSalePriceTestStatusText) {
    this.shortSalePriceTestStatusText = shortSalePriceTestStatusText;
    return this;
  }

  /**
   * Human-readable description of the short sale price test status
   * @return shortSalePriceTestStatusText
   */
  @javax.annotation.Nullable
  public String getShortSalePriceTestStatusText() {
    return shortSalePriceTestStatusText;
  }

  public void setShortSalePriceTestStatusText(@javax.annotation.Nullable String shortSalePriceTestStatusText) {
    this.shortSalePriceTestStatusText = shortSalePriceTestStatusText;
  }


  public AdminShortSalePriceTestStatusModel isShortSalePriceTestNotInEffect(@javax.annotation.Nullable Boolean isShortSalePriceTestNotInEffect) {
    this.isShortSalePriceTestNotInEffect = isShortSalePriceTestNotInEffect;
    return this;
  }

  /**
   * Indicates if the short sale price test is not in effect
   * @return isShortSalePriceTestNotInEffect
   */
  @javax.annotation.Nullable
  public Boolean getIsShortSalePriceTestNotInEffect() {
    return isShortSalePriceTestNotInEffect;
  }

  public void setIsShortSalePriceTestNotInEffect(@javax.annotation.Nullable Boolean isShortSalePriceTestNotInEffect) {
    this.isShortSalePriceTestNotInEffect = isShortSalePriceTestNotInEffect;
  }


  public AdminShortSalePriceTestStatusModel isShortSalePriceTestInEffect(@javax.annotation.Nullable Boolean isShortSalePriceTestInEffect) {
    this.isShortSalePriceTestInEffect = isShortSalePriceTestInEffect;
    return this;
  }

  /**
   * Indicates if the short sale price test is in effect
   * @return isShortSalePriceTestInEffect
   */
  @javax.annotation.Nullable
  public Boolean getIsShortSalePriceTestInEffect() {
    return isShortSalePriceTestInEffect;
  }

  public void setIsShortSalePriceTestInEffect(@javax.annotation.Nullable Boolean isShortSalePriceTestInEffect) {
    this.isShortSalePriceTestInEffect = isShortSalePriceTestInEffect;
  }


  public AdminShortSalePriceTestStatusModel detail(@javax.annotation.Nullable Integer detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Detail of the short sale price test as byte value
   * @return detail
   */
  @javax.annotation.Nullable
  public Integer getDetail() {
    return detail;
  }

  public void setDetail(@javax.annotation.Nullable Integer detail) {
    this.detail = detail;
  }


  public AdminShortSalePriceTestStatusModel detailCode(@javax.annotation.Nullable String detailCode) {
    this.detailCode = detailCode;
    return this;
  }

  /**
   * Detail of the short sale price test as character string
   * @return detailCode
   */
  @javax.annotation.Nullable
  public String getDetailCode() {
    return detailCode;
  }

  public void setDetailCode(@javax.annotation.Nullable String detailCode) {
    this.detailCode = detailCode;
  }


  public AdminShortSalePriceTestStatusModel detailText(@javax.annotation.Nullable String detailText) {
    this.detailText = detailText;
    return this;
  }

  /**
   * Human-readable description of the short sale price test detail
   * @return detailText
   */
  @javax.annotation.Nullable
  public String getDetailText() {
    return detailText;
  }

  public void setDetailText(@javax.annotation.Nullable String detailText) {
    this.detailText = detailText;
  }


  public AdminShortSalePriceTestStatusModel isDetailNoPriceTest(@javax.annotation.Nullable Boolean isDetailNoPriceTest) {
    this.isDetailNoPriceTest = isDetailNoPriceTest;
    return this;
  }

  /**
   * Indicates if there is no price test in place
   * @return isDetailNoPriceTest
   */
  @javax.annotation.Nullable
  public Boolean getIsDetailNoPriceTest() {
    return isDetailNoPriceTest;
  }

  public void setIsDetailNoPriceTest(@javax.annotation.Nullable Boolean isDetailNoPriceTest) {
    this.isDetailNoPriceTest = isDetailNoPriceTest;
  }


  public AdminShortSalePriceTestStatusModel isDetailActivated(@javax.annotation.Nullable Boolean isDetailActivated) {
    this.isDetailActivated = isDetailActivated;
    return this;
  }

  /**
   * Indicates if the short sale price test restriction is in effect due to an intraday price drop
   * @return isDetailActivated
   */
  @javax.annotation.Nullable
  public Boolean getIsDetailActivated() {
    return isDetailActivated;
  }

  public void setIsDetailActivated(@javax.annotation.Nullable Boolean isDetailActivated) {
    this.isDetailActivated = isDetailActivated;
  }


  public AdminShortSalePriceTestStatusModel isDetailContinued(@javax.annotation.Nullable Boolean isDetailContinued) {
    this.isDetailContinued = isDetailContinued;
    return this;
  }

  /**
   * Indicates if the short sale price test restriction remains in effect from prior day
   * @return isDetailContinued
   */
  @javax.annotation.Nullable
  public Boolean getIsDetailContinued() {
    return isDetailContinued;
  }

  public void setIsDetailContinued(@javax.annotation.Nullable Boolean isDetailContinued) {
    this.isDetailContinued = isDetailContinued;
  }


  public AdminShortSalePriceTestStatusModel isDetailDeactivated(@javax.annotation.Nullable Boolean isDetailDeactivated) {
    this.isDetailDeactivated = isDetailDeactivated;
    return this;
  }

  /**
   * Indicates if the short sale price test restriction is deactivated
   * @return isDetailDeactivated
   */
  @javax.annotation.Nullable
  public Boolean getIsDetailDeactivated() {
    return isDetailDeactivated;
  }

  public void setIsDetailDeactivated(@javax.annotation.Nullable Boolean isDetailDeactivated) {
    this.isDetailDeactivated = isDetailDeactivated;
  }


  public AdminShortSalePriceTestStatusModel isDetailNotAvailable(@javax.annotation.Nullable Boolean isDetailNotAvailable) {
    this.isDetailNotAvailable = isDetailNotAvailable;
    return this;
  }

  /**
   * Indicates if the detail is not available
   * @return isDetailNotAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsDetailNotAvailable() {
    return isDetailNotAvailable;
  }

  public void setIsDetailNotAvailable(@javax.annotation.Nullable Boolean isDetailNotAvailable) {
    this.isDetailNotAvailable = isDetailNotAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminShortSalePriceTestStatusModel adminShortSalePriceTestStatusModel = (AdminShortSalePriceTestStatusModel) o;
    return Objects.equals(this.symbol, adminShortSalePriceTestStatusModel.symbol) &&
        Objects.equals(this.timestampNanos, adminShortSalePriceTestStatusModel.timestampNanos) &&
        Objects.equals(this.timestamp, adminShortSalePriceTestStatusModel.timestamp) &&
        Objects.equals(this.shortSalePriceTestStatus, adminShortSalePriceTestStatusModel.shortSalePriceTestStatus) &&
        Objects.equals(this.shortSalePriceTestStatusCode, adminShortSalePriceTestStatusModel.shortSalePriceTestStatusCode) &&
        Objects.equals(this.shortSalePriceTestStatusText, adminShortSalePriceTestStatusModel.shortSalePriceTestStatusText) &&
        Objects.equals(this.isShortSalePriceTestNotInEffect, adminShortSalePriceTestStatusModel.isShortSalePriceTestNotInEffect) &&
        Objects.equals(this.isShortSalePriceTestInEffect, adminShortSalePriceTestStatusModel.isShortSalePriceTestInEffect) &&
        Objects.equals(this.detail, adminShortSalePriceTestStatusModel.detail) &&
        Objects.equals(this.detailCode, adminShortSalePriceTestStatusModel.detailCode) &&
        Objects.equals(this.detailText, adminShortSalePriceTestStatusModel.detailText) &&
        Objects.equals(this.isDetailNoPriceTest, adminShortSalePriceTestStatusModel.isDetailNoPriceTest) &&
        Objects.equals(this.isDetailActivated, adminShortSalePriceTestStatusModel.isDetailActivated) &&
        Objects.equals(this.isDetailContinued, adminShortSalePriceTestStatusModel.isDetailContinued) &&
        Objects.equals(this.isDetailDeactivated, adminShortSalePriceTestStatusModel.isDetailDeactivated) &&
        Objects.equals(this.isDetailNotAvailable, adminShortSalePriceTestStatusModel.isDetailNotAvailable);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, timestampNanos, timestamp, shortSalePriceTestStatus, shortSalePriceTestStatusCode, shortSalePriceTestStatusText, isShortSalePriceTestNotInEffect, isShortSalePriceTestInEffect, detail, detailCode, detailText, isDetailNoPriceTest, isDetailActivated, isDetailContinued, isDetailDeactivated, isDetailNotAvailable);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminShortSalePriceTestStatusModel {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestampNanos: ").append(toIndentedString(timestampNanos)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    shortSalePriceTestStatus: ").append(toIndentedString(shortSalePriceTestStatus)).append("\n");
    sb.append("    shortSalePriceTestStatusCode: ").append(toIndentedString(shortSalePriceTestStatusCode)).append("\n");
    sb.append("    shortSalePriceTestStatusText: ").append(toIndentedString(shortSalePriceTestStatusText)).append("\n");
    sb.append("    isShortSalePriceTestNotInEffect: ").append(toIndentedString(isShortSalePriceTestNotInEffect)).append("\n");
    sb.append("    isShortSalePriceTestInEffect: ").append(toIndentedString(isShortSalePriceTestInEffect)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    detailCode: ").append(toIndentedString(detailCode)).append("\n");
    sb.append("    detailText: ").append(toIndentedString(detailText)).append("\n");
    sb.append("    isDetailNoPriceTest: ").append(toIndentedString(isDetailNoPriceTest)).append("\n");
    sb.append("    isDetailActivated: ").append(toIndentedString(isDetailActivated)).append("\n");
    sb.append("    isDetailContinued: ").append(toIndentedString(isDetailContinued)).append("\n");
    sb.append("    isDetailDeactivated: ").append(toIndentedString(isDetailDeactivated)).append("\n");
    sb.append("    isDetailNotAvailable: ").append(toIndentedString(isDetailNotAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("symbol", "timestamp_nanos", "timestamp", "short_sale_price_test_status", "short_sale_price_test_status_code", "short_sale_price_test_status_text", "is_short_sale_price_test_not_in_effect", "is_short_sale_price_test_in_effect", "detail", "detail_code", "detail_text", "is_detail_no_price_test", "is_detail_activated", "is_detail_continued", "is_detail_deactivated", "is_detail_not_available"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminShortSalePriceTestStatusModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminShortSalePriceTestStatusModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminShortSalePriceTestStatusModel is not found in the empty JSON string", AdminShortSalePriceTestStatusModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminShortSalePriceTestStatusModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminShortSalePriceTestStatusModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("short_sale_price_test_status_code") != null && !jsonObj.get("short_sale_price_test_status_code").isJsonNull()) && !jsonObj.get("short_sale_price_test_status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_sale_price_test_status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_sale_price_test_status_code").toString()));
      }
      if ((jsonObj.get("short_sale_price_test_status_text") != null && !jsonObj.get("short_sale_price_test_status_text").isJsonNull()) && !jsonObj.get("short_sale_price_test_status_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_sale_price_test_status_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_sale_price_test_status_text").toString()));
      }
      if ((jsonObj.get("detail_code") != null && !jsonObj.get("detail_code").isJsonNull()) && !jsonObj.get("detail_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail_code").toString()));
      }
      if ((jsonObj.get("detail_text") != null && !jsonObj.get("detail_text").isJsonNull()) && !jsonObj.get("detail_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminShortSalePriceTestStatusModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminShortSalePriceTestStatusModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminShortSalePriceTestStatusModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminShortSalePriceTestStatusModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminShortSalePriceTestStatusModel>() {
           @Override
           public void write(JsonWriter out, AdminShortSalePriceTestStatusModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminShortSalePriceTestStatusModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminShortSalePriceTestStatusModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminShortSalePriceTestStatusModel
   * @throws IOException if the JSON string is invalid with respect to AdminShortSalePriceTestStatusModel
   */
  public static AdminShortSalePriceTestStatusModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminShortSalePriceTestStatusModel.class);
  }

  /**
   * Convert an instance of AdminShortSalePriceTestStatusModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

